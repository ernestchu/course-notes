import{c as s,o as l,F as a,a as n,d as e}from"./app.bdc3a143.js";import{_ as t}from"./plugin-vue_export-helper.5a098b48.js";var o="/course-notes/assets/tee.03251343.svg";const c={},i=n("h1",{id:"lecture-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lecture-2","aria-hidden":"true"},"#"),e(" Lecture 2")],-1),r=n("h2",{id:"miscellaneous-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#miscellaneous-commands","aria-hidden":"true"},"#"),e(" Miscellaneous Commands")],-1),u=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Command"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"echo [string]")]),n("td",null,[e("print the string, use "),n("code",null,"-n"),e(" to prevent newline")])]),n("tr",null,[n("td",null,[n("code",null,"wc [filename]")]),n("td",null,"word count. [#lines][#words][#characters][filename]")]),n("tr",null,[n("td",null,[n("code",null,"cut [filename]")]),n("td",null,[n("code",null,"cut"),e(" charaters("),n("code",null,"-c"),e(") or fields("),n("code",null,"-f"),e(") from each input line")])]),n("tr",null,[n("td",null,[n("code",null,"alias ")]),n("td",null,"create a command shortcut")]),n("tr",null,[n("td",null,[n("code",null,"basename [string]")]),n("td",null,"print the end part of the argument sent to it")]),n("tr",null,[n("td",null,[n("code",null,"history")]),n("td",null,"list the history of commands you typed")]),n("tr",null,[n("td",null,"`![number"),n("td",null,"prefix]`")])])],-1),d=n("h3",{id:"cut",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cut","aria-hidden":"true"},"#"),e(" cut")],-1),p=n("p",null,[n("code",null,"-c"),e(" and "),n("code",null,"-f"),e(" can be followed by indices or ranges, where the index start from 1 instead of 0.")],-1),h=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(),n("span",{class:"token function"},"file"),e(`
abcdefghijklmno
% `),n("span",{class:"token function"},"cut"),e(" -c4-5,10 "),n("span",{class:"token function"},"file"),e(`
dej
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])],-1),b=n("p",null,[e("Other useful flags are "),n("code",null,"--complement"),e(" and "),n("code",null,"-d")],-1),m=n("p",null,[n("code",null,"--complement"),e(" shows everything except charaters or fields specified by "),n("code",null,"-c"),e(" and "),n("code",null,"-f"),e(" repectively.")],-1),f=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cut"),e(" --complement -c4-5,10 "),n("span",{class:"token function"},"file"),e(`
abcfghiklmno
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br")])],-1),g=n("p",null,[n("code",null,"-d"),e(" specifies the "),n("strong",null,"delimiter"),e(" to seperate fields, the delimiter is default to tab "),n("code",null,"\\t"),e(" if not specified.")],-1),_=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(),n("span",{class:"token function"},"file"),e(`
apple banana cherry
% `),n("span",{class:"token function"},"cut"),e(" -f1 "),n("span",{class:"token function"},"file"),e(`
apple banana cherry
% `),n("span",{class:"token function"},"cut"),e(" -f1 -d"),n("span",{class:"token string"},'" "'),e(),n("span",{class:"token function"},"file"),e(`
apple
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br")])],-1),k=n("h2",{id:"redirection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redirection","aria-hidden":"true"},"#"),e(" Redirection")],-1),v=n("blockquote",null,[n("p",null,[n("code",null,"cmd"),e(" is abbr. for "),n("strong",null,"command"),e(" and "),n("code",null,"fn"),e(" is abbr. for "),n("strong",null,"filename")])],-1),w=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Command"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"[cmd] < [fn]")]),n("td",null,"Redirect keyboard input to come from a file")]),n("tr",null,[n("td",null,[n("code",null,"[cmd] >, 2>, &> [fn]")]),n("td",null,"Redirect screen output to a file")]),n("tr",null,[n("td",null,[n("code",null,"[cmd] >>, 2>> [fn]")]),n("td",null,"Redirect screen output to the end of a file")]),n("tr",null,[n("td",null,"`[cmd]"),n("td",null,"[cmd]`")]),n("tr",null,[n("td",null,"`[cmd]"),n("td",null,"tee [fn]")]),n("tr",null,[n("td",null,[n("code",null,"`[cmd]`")]),n("td",null,"Redirect the output to become an inplace argument")]),n("tr",null,[n("td",null,"`[cmd]"),n("td",null,"xargs [cmd]`")])])],-1),x=n("h3",{id:"redirection-can-affect-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redirection-can-affect-commands","aria-hidden":"true"},"#"),e(" Redirection can affect commands")],-1),y=n("p",null,[e("As we've learned above, "),n("code",null,"wc -c File"),e(" will output the number of characters followed by the filename. However, if we didn't specify the filename, "),n("code",null,"wc"),e(" would take standard input as a file. In this case, no filename will be output, because there's no file. Also, we can use redirection to redirect standard input to come from a file. Same as above, "),n("code",null,"wc"),e(" have no idea of the existance of the file.")],-1),F=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"wc"),e(` -c File
`),n("span",{class:"token number"},"100"),e(` File
% `),n("span",{class:"token function"},"wc"),e(` -c
`),n("span",{class:"token operator"},">"),e(` This is typed
`),n("span",{class:"token operator"},">"),e(` by ourselves
`),n("span",{class:"token operator"},">"),e(" as input fed into "),n("span",{class:"token function"},"wc"),e(`
`),n("span",{class:"token operator"},">"),e(` ^D
`),n("span",{class:"token number"},"48"),e(`
% `),n("span",{class:"token function"},"wc"),e(" -c "),n("span",{class:"token operator"},"<"),e(` File
`),n("span",{class:"token number"},"100"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br")])],-1),T=n("p",null,[e("A special case for "),n("code",null,"paste"),e(" command is that if we use "),n("code",null,"-"),e(" as the argument instead of a filename, "),n("code",null,"paste"),e(" would take input as the file (can be standard input or redirection).")],-1),R=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`% paste File1 File2
a	1
b	2
c	3
d	4
% paste File1 - < File 2
a	1
b	2
c	3
d	4
% paste - - < File 1
a   b
c   d
`)]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br")])],-1),I=n("h3",{id:"various-redrection-modes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#various-redrection-modes","aria-hidden":"true"},"#"),e(" Various redrection modes")],-1),C=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(` File
Hello World`),n("span",{class:"token operator"},"!"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" End of the world :"),n("span",{class:"token punctuation"},"("),e(),n("span",{class:"token operator"},">"),e(` File
% `),n("span",{class:"token function"},"cat"),e(` File
End of the world :`),n("span",{class:"token punctuation"},"("),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br")])],-1),j=n("p",null,[e("we can see that "),n("code",null,"echo"),e(" with the redirection "),n("code",null,">"),e(" overwrites the existing content in the file. How to prevent that? Use "),n("code",null,">>"),e(" instead!")],-1),E=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(` File
Hello World`),n("span",{class:"token operator"},"!"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" End of the world "),n("span",{class:"token builtin class-name"},":"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},">>"),e(` File
% `),n("span",{class:"token function"},"cat"),e(` File
Hello World`),n("span",{class:"token operator"},"!"),e(" End of the world "),n("span",{class:"token builtin class-name"},":"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br")])],-1),H=n("p",null,[n("code",null,">>"),e(" append the output of a command to the end of a file. In fact, there're serveral different redirection modes.")],-1),D=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Redirection symbol"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,"&>"),n("td",null,"Redirect stdout&stderr")]),n("tr",null,[n("td",null,"2>"),n("td",null,"Redirect stderr only")]),n("tr",null,[n("td",null,">>"),n("td",null,"Redirect stdout to the end of a file only")]),n("tr",null,[n("td",null,"2>>"),n("td",null,"Redirect stderr to the end of a file only")])])],-1),B=n("p",null,[e("In addition, if you just want to hide the output by redirection and you don't a dummy file to be generated, in Unix-like system, you can simply redirect the output to "),n("code",null,"/dev/null"),e(", which is an abyss and you do not bother what's inside it.")],-1),U=n("h3",{id:"the-pipe",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-pipe","aria-hidden":"true"},"#"),e(" The pipe")],-1),q=n("p",null,[e("You can link commands together into a single command sequence using pipes "),n("code",null,"|"),e(". For example, to count how many files are in a directory")],-1),S=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"ls"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"wc"),e(` -l
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),W=n("h4",{id:"tee",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tee","aria-hidden":"true"},"#"),e(" Tee")],-1),A=n("p",null,[e("You can use "),n("code",null,"tee"),e(" to redirect the output to a file and the next command at once")],-1),Y=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"ls"),e(" -l "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"tee"),e(" file.txt "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"less"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),O=n("p",null,[n("img",{src:o,alt:"tee"})],-1),P=n("blockquote",null,[n("p",null,"Image credit to Wikipeida")],-1),V=n("h4",{id:"backtick",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#backtick","aria-hidden":"true"},"#"),e(" Backtick")],-1),M=n("p",null,[e("The command within the "),n("code",null,"`[command]`"),e(" would first be evaluated before run the entire command. For example")],-1),N=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"ls"),e(` -l
total `),n("span",{class:"token number"},"0"),e(`
lrwxr-xr-x  `),n("span",{class:"token number"},"1"),e(" ernestchu  staff  "),n("span",{class:"token number"},"16"),e(" Apr "),n("span",{class:"token number"},"10"),e(),n("span",{class:"token number"},"16"),e(":10 home -"),n("span",{class:"token operator"},">"),e(` /Users/ernestchu
% `),n("span",{class:"token builtin class-name"},"cd"),e(` home
% `),n("span",{class:"token builtin class-name"},"cd"),e(),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token builtin class-name"},"pwd"),e(" -P"),n("span",{class:"token variable"},"`")]),e(`
% `),n("span",{class:"token builtin class-name"},"pwd"),e(`
/Users/ernestchu
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br")])],-1),L=n("p",null,[n("code",null,"pwd -P"),e(" first show the genuine path to current directory, in constrast to the symbolic one, then "),n("code",null,"cd"),e(" change the current directory to the "),n("strong",null,"argument"),e(" generated by "),n("code",null,"pwd -P"),e(".")],-1),z=n("h4",{id:"xargs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#xargs","aria-hidden":"true"},"#"),e(" xargs")],-1),G=n("p",null,"Consider a scenario that you want to find a keyword in all of the files under current directory. The candidate commands are",-1),J=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"find"),e(),n("span",{class:"token builtin class-name"},"."),e(" -type f -name "),n("span",{class:"token string"},'"*"'),e(`
`),n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token punctuation"},"["),e("keyword"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("filename"),n("span",{class:"token punctuation"},"]"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br")])],-1),K=n("p",null,[e("We know that "),n("code",null,"find"),e(" gives us a list of file names, but how can we feed those file names to "),n("code",null,"fgrep"),e("? Maybe")],-1),Q=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"find"),e(),n("span",{class:"token builtin class-name"},"."),e(" -type f -name "),n("span",{class:"token string"},'"*"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token string"},'"int main("'),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),X=n("p",null,"However, this would be evaluated as",-1),Z=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token string"},'"int main("'),e(),n("span",{class:"token string"},'"file1 file2 file3 ..."'),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),$=n("p",null,[n("code",null,"fgrep"),e(" searches for the patterns in the string "),n("code",null,'"file1 file2 file3 ..."'),e(" and of course, "),n("code",null,'"int main("'),e(" is not in that string. How would we use that string as individual arguments of file names? Use "),n("code",null,"xargs"),e(" instead.")],-1),nn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"find"),e(),n("span",{class:"token builtin class-name"},"."),e(" -type f -name "),n("span",{class:"token string"},'"*"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"xargs"),e(),n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token string"},'"int main("'),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),en=n("p",null,"The command above would be evaluated as",-1),sn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token string"},'"int main("'),e(" file1 file2 file3 "),n("span",{class:"token punctuation"},".."),e(`.
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),ln=n("p",null,[e("Of course, if I were not writting note on "),n("code",null,"xargs"),e(", I would just use backticks")],-1),an=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"fgrep"),e(),n("span",{class:"token string"},'"int main("'),e(),n("span",{class:"token variable"},[n("span",{class:"token variable"},"`"),n("span",{class:"token function"},"find"),e(),n("span",{class:"token builtin class-name"},"."),e(" -type f -name "),n("span",{class:"token string"},'"*"'),n("span",{class:"token variable"},"`")]),e(`   
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),tn=n("p",null,[e("But there's also cases where "),n("code",null,"xargs"),e(" is irreplaceable.")],-1),on=n("h2",{id:"command-coordination",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#command-coordination","aria-hidden":"true"},"#"),e(" Command Coordination")],-1),cn=n("p",null,"There are three operator that connect commands",-1),rn=n("ul",null,[n("li",null,[e("Semicolon "),n("code",null,";")]),n("li",null,[e("Double ampersands "),n("code",null,"&&")]),n("li",null,[e("Double bars "),n("code",null,"||")])],-1),un=n("h3",{id:"semicolon",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#semicolon","aria-hidden":"true"},"#"),e(" Semicolon")],-1),dn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"cd"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token function"},"ls"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),pn=n("p",null,"The semicolon linking two commands just enables them to be typed on the same line. The command above is equivalent to",-1),hn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"cd"),e(` 
`),n("span",{class:"token function"},"ls"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br")])],-1),bn=n("h3",{id:"double-ampersands-and-bars",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#double-ampersands-and-bars","aria-hidden":"true"},"#"),e(" Double ampersands and bars")],-1),mn=n("p",null,[e("You may have seen "),n("code",null,"&&"),e(" in C programming language expression. In Unix shell, it can also be used to produce an boolean expression. But more frequenly, it is used with "),n("strong",null,"short circuit evaluation"),e(". Consider")],-1),fn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"cat"),e(" ExistingFile "),n("span",{class:"token operator"},"&>"),e(" /dev/null "),n("span",{class:"token operator"},"&&"),e(),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token builtin class-name"},"echo"),e(` executed
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),gn=n("p",null,[e("If the "),n("code",null,"ExistingFile"),e(" do exist, then to get the boolean value of the expression we still need to consider the latter command. So the output will be "),n("code",null,"echo executed"),e(". However, if the filename lied, the file cannot be found, then right after the former command is evaluated as false due to the error, the result of the entire expression is determined to be "),n("strong",null,"false"),e(". Therefore, the latter command needn't and won't be executed. There would be no output.")],-1),_n=n("p",null,"On the other hand, consider",-1),kn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"cat"),e(" ExistingFile "),n("span",{class:"token operator"},"&>"),e(" /dev/null "),n("span",{class:"token operator"},"||"),e(),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token builtin class-name"},"echo"),e(` executed
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),vn=n("p",null,"If the first command succeeded, then the result of the expression is determined and there would be no output, vice versa.",-1),wn=n("p",null,[e("Though we'll meet if else later in the shell script, but we can purely use "),n("code",null,"&&"),e(" and "),n("code",null,"||"),e(" to mimic the conditional statement. Since we've not learned the if else syntax in shell script, let's use C-fashion syntax!")],-1),xn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("cmd1"),n("span",{class:"token punctuation"},")"),e(`
    `),n("span",{class:"token keyword"},"do"),e(` cmd2
`),n("span",{class:"token keyword"},"else"),e(`
    `),n("span",{class:"token keyword"},"do"),e(` cmd3
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])],-1),yn=n("p",null,"This command snippet can be written in the following form",-1),Fn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("cmd1 "),n("span",{class:"token operator"},"&&"),e(" cmd2 "),n("span",{class:"token operator"},"||"),e(` cmd3
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),Tn=n("p",null,"You can think a little bit to figure it our why it works. It's pretty simple! if you need a nested if else, just use parenthesis to wrap the expression up.",-1);function Rn(In,Cn){return l(),s(a,null,[i,r,u,d,p,h,b,m,f,g,_,k,v,w,x,y,F,T,R,I,C,j,E,H,D,B,U,q,S,W,A,Y,O,P,V,M,N,L,z,G,J,K,Q,X,Z,$,nn,en,sn,ln,an,tn,on,cn,rn,un,dn,pn,hn,bn,mn,fn,gn,_n,kn,vn,wn,xn,yn,Fn,Tn],64)}var Hn=t(c,[["render",Rn]]);export{Hn as default};
