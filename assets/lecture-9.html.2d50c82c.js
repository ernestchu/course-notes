import{e as s}from"./app.bdc3a143.js";import{_ as n}from"./plugin-vue_export-helper.5a098b48.js";const e={},a=s(`<h1 id="lecture-9" tabindex="-1"><a class="header-anchor" href="#lecture-9" aria-hidden="true">#</a> Lecture 9</h1><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cal</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;\\ 1 d&#39;</span>
<span class="token function">cal</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;/1/d&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cal</span> <span class="token operator">|</span> <span class="token function">sed</span> -n <span class="token string">&#39;1p&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="pattern-match-conditionals-the-dfa-analogy" tabindex="-1"><a class="header-anchor" href="#pattern-match-conditionals-the-dfa-analogy" aria-hidden="true">#</a> Pattern match conditionals - the DFA analogy</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>% <span class="token function">cat</span> script
<span class="token comment">#!/usr/bin/sed -f</span>
/start/,/stop/ s/<span class="token comment">#.*//</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> f1
star <span class="token comment">#</span>
start <span class="token comment">#</span>
sto
sto<span class="token comment">#</span>
stop<span class="token comment">#</span>
star<span class="token comment">#</span>
% ./script <span class="token operator">&lt;</span> f1
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>star #</code></td><td>Print the line</td></tr><tr><td><code>start #</code></td><td>Go to state 1 and remove <code>#</code>, then print the line</td></tr><tr><td><code>sto</code></td><td>Still in state 1, print the line</td></tr><tr><td><code>sto#</code></td><td>Remove <code>#</code> and print the line</td></tr><tr><td><code>stop#</code></td><td>Remove <code>#</code>, print the line, then go to state 0</td></tr><tr><td><code>star#</code></td><td>Print the line</td></tr></tbody></table><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>% <span class="token function">cat</span> f2
ffstart <span class="token comment">#ff</span>
stop <span class="token comment">#</span>
start<span class="token comment">#</span>
ggg<span class="token comment">#</span>
% ./script <span class="token operator">&lt;</span> f2
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>ffstart #ff</code></td><td>Go to state 1 and remove <code>#ff</code>, then print the line</td></tr><tr><td><code>stop #</code></td><td>Remove <code>#</code>, print the line, then go to state 0</td></tr><tr><td><code>start#</code></td><td>Go to state 1 and remove <code>#</code>, the print the line</td></tr><tr><td><code>ggg#</code></td><td>Remove <code>#</code> and print the line</td></tr></tbody></table><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>% <span class="token function">cat</span> f2
ffstart <span class="token comment">#stop</span>
stop <span class="token comment"># start</span>
ggg<span class="token comment">#</span>
start<span class="token comment">#</span>
stop <span class="token comment"># start</span>
ggg<span class="token comment">#</span>
% ./script <span class="token operator">&lt;</span> f2
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>ffstart #stop</code></td><td>Go to state 1 and remove <code>#stop</code>, then print the line</td></tr><tr><td><code>stop # start</code></td><td>Remove <code># start</code>, print the line, then go to state 0</td></tr><tr><td><code>ggg#</code></td><td>Print the line</td></tr><tr><td><code>start#</code></td><td>Go to state 1, remove <code>#</code> and print the line</td></tr><tr><td><code>stop # start</code></td><td>Remove <code># start</code>, print the line and go to state 0</td></tr><tr><td><code>ggg#</code></td><td>Print the line</td></tr></tbody></table><p>The following only works in Linux sed but not in macOS sed</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/2/two/;t;d&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;/2/b;d&#39;</span>
<span class="token function">seq</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;/2/!d&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,14);function t(o,c){return a}var d=n(e,[["render",t]]);export{d as default};
