import{c as a,o as t,F as l,a as n,d as e}from"./app.bdc3a143.js";import{_ as o}from"./plugin-vue_export-helper.5a098b48.js";var r="/course-notes/assets/a-a-star.22556830.svg",s="/course-notes/assets/a-star-a.ccd63c61.svg",c="/course-notes/assets/number.e4b80ea7.svg";const i={},u=n("h1",{id:"lecture-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lecture-5","aria-hidden":"true"},"#"),e(" Lecture 5")],-1),p=n("h2",{id:"the-greps",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-greps","aria-hidden":"true"},"#"),e(" The greps")],-1),d=n("ul",null,[n("li",null,[n("code",null,"fgrep"),e(": "),n("strong",null,"f"),e("ixed-string "),n("strong",null,"grep"),e(" to searches for strings (not regex).")]),n("li",null,[n("code",null,"grep"),e(": "),n("strong",null,"g"),e("et "),n("strong",null,"r"),e("egular "),n("strong",null,"e"),e("xpression and "),n("strong",null,"p"),e("rint to search for regular expression patterns.")]),n("li",null,[n("code",null,"egrep"),e(": "),n("strong",null,"e"),e("xtended "),n("strong",null,"grep"),e(" for an alternative pattern description system (extended regex)")])],-1),h=n("h3",{id:"important-flags",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#important-flags","aria-hidden":"true"},"#"),e(" Important flags")],-1),b=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Flag"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"-i")]),n("td",null,[e("Case "),n("strong",null,"i"),e("nsensitive")])]),n("tr",null,[n("td",null,[n("code",null,"-n")]),n("td",null,[e("Display line "),n("strong",null,"n"),e("umbers")])]),n("tr",null,[n("td",null,[n("code",null,"-v")]),n("td",null,[e("In"),n("strong",null,"v"),e("ert the matches")])]),n("tr",null,[n("td",null,[n("code",null,"-w")]),n("td",null,[n("strong",null,"W"),e("hole word matches")])]),n("tr",null,[n("td",null,[n("code",null,"-o")]),n("td",null,[n("strong",null,"O"),e("nly display the matches, not the entire line")])]),n("tr",null,[n("td",null,[n("code",null,"-e")]),n("td",null,[e("After this goes a reg"),n("strong",null,"e"),e("x")])]),n("tr",null,[n("td",null,[n("code",null,"-A")]),n("td",null,[e("Set the # of lines of context to print "),n("strong",null,"a"),e("fter each match")])]),n("tr",null,[n("td",null,[n("code",null,"-B")]),n("td",null,[e("Set the # of lines of context to print "),n("strong",null,"b"),e("efore each match")])]),n("tr",null,[n("td",null,[n("code",null,"-C")]),n("td",null,[e("Set the # of lines of "),n("strong",null,"c"),e("ontext to print before and after each match")])]),n("tr",null,[n("td",null,[n("code",null,"--color")]),n("td",null,"Highlight the matching pattern")])])],-1),m=n("h2",{id:"fgrep",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fgrep","aria-hidden":"true"},"#"),e(" fgrep")],-1),g=n("h3",{id:"limitation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#limitation","aria-hidden":"true"},"#"),e(" Limitation")],-1),k=n("ul",null,[n("li",null,"cannot use it to get approximate matches"),n("li",null,"cannot use it to get matches of more complicated patterns that cannot be described by just giving a fixed string")],-1),f=n("h2",{id:"grep",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grep","aria-hidden":"true"},"#"),e(" grep")],-1),_=n("h3",{id:"regular-expression-regex-symbols",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#regular-expression-regex-symbols","aria-hidden":"true"},"#"),e(" Regular expression (regex) symbols")],-1),x=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Symbol"),n("th",null,"Description"),n("th",null,"Example")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"^")]),n("td",null,"caret, as the first symbol of a regex, requires the expression to match the front of a line."),n("td",null,[e("line begins with 'A': "),n("code",null,"^A")])]),n("tr",null,[n("td",null,[n("code",null,"$")]),n("td",null,"dollar sign, as the last symbol of a regex, requires the expression to match the end of a line."),n("td",null,[e("line ends with 'Z': "),n("code",null,"Z$")])]),n("tr",null,[n("td",null,[n("code",null,"\\")]),n("td",null,"backslash, turns off special meaning for the next character."),n("td",null,[e("match to a literal '$': "),n("code",null,"\\$")])]),n("tr",null,[n("td",null,[n("code",null,"[]")]),n("td",null,"brackets, matches to any one of the enclosed characters."),n("td",null,[e("match to any vowel: "),n("code",null,"[aeiou]")])]),n("tr",null,[n("td",null,[n("code",null,".")]),n("td",null,"period, matches to any 1 character."),n("td",null,[e("a 1-character line: "),n("code",null,"^.$")])])])],-1),y=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Special Symbols Inside Brackets"),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Symbol"),n("th",null,"Description"),n("th",null,"Example")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"-")]),n("td",null,[e("hyphen, inside "),n("code",null,"[]"),e(", matches to a range.")]),n("td",null,[e("a digit: "),n("code",null,"[0-9]")])]),n("tr",null,[n("td",null,[n("code",null,"^")]),n("td",null,[e("caret, as the first symbol inside "),n("code",null,"[]"),e(", matches any one character except those enclosed in the "),n("code",null,"[]")]),n("td",null,[e("not a letter: "),n("code",null,"[^a-zA-Z]")])])])]),n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"The Position of The Caret"),n("p",null,[e("If the caret was not placed as the first symbol inside "),n("code",null,"[]"),e(", for example, "),n("code",null,"[ab^cd]"),e(", then it just represents a literal `^'.")])])],-1),w=n("h4",{id:"regex-and-state-machine",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#regex-and-state-machine","aria-hidden":"true"},"#"),e(" Regex and state machine")],-1),v=n("p",null,"Regex is derived from the finite state machine.",-1),z=n("h5",{id:"deternimistic-finite-state-automaton-dfa",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deternimistic-finite-state-automaton-dfa","aria-hidden":"true"},"#"),e(" Deternimistic finite state automaton (DFA)")],-1),T=n("p",null,"For the same input, there is exacly one transistion (deterministic) to the next state, for example",-1),B=n("p",null,[n("img",{src:r,alt:"a-a-star"})],-1),A=n("p",null,[e("In regex, "),n("code",null,"aa*"),e(", expressing any sting of at least one a.")],-1),E=n("h5",{id:"nondeternimistic-finite-state-automaton-nfa",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nondeternimistic-finite-state-automaton-nfa","aria-hidden":"true"},"#"),e(" Nondeternimistic finite state automaton (NFA)")],-1),S=n("p",null,"For the same input, there can be one or more transitions (nondeterministic) to the next state, for example",-1),F=n("p",null,[n("img",{src:s,alt:"a-a-star"})],-1),D=n("p",null,[e("In regex, "),n("code",null,"a*a"),e(", expressing any sting of at least one a.")],-1),C=n("h3",{id:"exercise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exercise","aria-hidden":"true"},"#"),e(" Exercise")],-1),$=n("p",null,[n("strong",null,"Problem:"),e(" Draw the NFA for this regex: "),n("code",null,"a*a*")],-1),q=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Answer"),n("p",null,[n("img",{src:s,alt:"a-a-star"})]),n("p",null,[e("And the simplify/deterministic regex for it: "),n("code",null,"a*")])],-1),I=n("p",null,[e("Let's now look at how to use "),n("code",null,"grep")],-1),j=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"grep"),e(` -h
usage: `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token punctuation"},"["),e("-abcDEFGHhIiJLlmnOoqRSsUVvwxZ"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("-A num"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("-B num"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("-C"),n("span",{class:"token punctuation"},"["),e("num"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`
	`),n("span",{class:"token punctuation"},"["),e("-e pattern"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("-f file"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("--binary-files"),n("span",{class:"token operator"},"="),e("value"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("--color"),n("span",{class:"token operator"},"="),e("when"),n("span",{class:"token punctuation"},"]"),e(`
	`),n("span",{class:"token punctuation"},"["),e("--context"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"="),e("num"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("--directories"),n("span",{class:"token operator"},"="),e("action"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("--label"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("--line-buffered"),n("span",{class:"token punctuation"},"]"),e(`
	`),n("span",{class:"token punctuation"},"["),e("--null"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("pattern"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token punctuation"},"["),e("file "),n("span",{class:"token punctuation"},".."),e("."),n("span",{class:"token punctuation"},"]"),e(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br")])],-1),W=n("p",null,[e("So, in short, we can use "),n("code",null,"grep [regex] [filenames]"),e(".")],-1),R=n("details",{class:"custom-container details"},[n("summary",null,"A Simple Example"),n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`% grep -w -e 'three$' -e 'four$' lewis.txt 
very large house with a housekeeper called Mrs. Macready and three
shall be only a statue of a Faun in her horrible house until the four
time of those four thrones at Cair Paravel).  Once you were all four
else--namely a little dwarf who stood with his back to it about four
there's sugar, and some matches.  And if someone will get two or three
"Four thrones in Cair Paravel," said the Witch.  "How if only three
hill and came straight across and stood before Aslan.  The three
flashing so quickly that they looked like three knives and three
`)]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br")])])],-1),M=n("details",{class:"custom-container details"},[n("summary",null,"More Examples"),n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^word'"),e("         files "),n("span",{class:"token comment"},"# \u201Cword\u201D at the start of a line"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'word$'"),e("         files "),n("span",{class:"token comment"},"# \u201Cword\u201D at the end of a line"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^word$'"),e("        files "),n("span",{class:"token comment"},"# lines containing only \u201Cword\u201D"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'\\^s'"),e("           files "),n("span",{class:"token comment"},"# lines containing \u201C^s\u201D"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[Ww]ord'"),e("       files "),n("span",{class:"token comment"},"# search for \u201CWord\u201D or \u201Cword\u201D"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'B[oO][bB]'"),e("     files "),n("span",{class:"token comment"},"# search for BOB, Bob, BOb or BoB"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^$'"),e("            files "),n("span",{class:"token comment"},"# search for blank lines"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[0-9][0-9]'"),e("    files "),n("span",{class:"token comment"},"# search for pairs of numeric digits"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[^a-zA-Z0-9]'"),e("  files "),n("span",{class:"token comment"},"# anything not a letter or number"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^.$'"),e("           files "),n("span",{class:"token comment"},"# lines with exactly one character"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},`'"word"'`),e("        files "),n("span",{class:"token comment"},'# "word" within double quotes'),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},`'"*word"*'`),e("      files "),n("span",{class:"token comment"},"# \u201Cword\u201D, with or without quotes"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^\\.'"),e("           files "),n("span",{class:"token comment"},"# any line that starts with \u201C.\u201D"),e(`
`),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'^\\.[a-z][a-z]'"),e(" files "),n("span",{class:"token comment"},"# line start with \u201C.\u201D followed by 2 lower-case letters"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br")])])],-1),L=n("h2",{id:"regex-vs-wildcards",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#regex-vs-wildcards","aria-hidden":"true"},"#"),e(" Regex vs. Wildcards")],-1),H=n("p",null,[e("Let's see the similarity and difference between "),n("strong",null,"regex"),e(" and "),n("strong",null,"csh wildcards")],-1),O=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"In regex"),n("th",null,"In csh wilcard"),n("th",null,"Meaning")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"\\")]),n("td",null,[n("code",null,"\\")]),n("td",null,"Same")]),n("tr",null,[n("td",null,[n("code",null,"[]")]),n("td",null,[n("code",null,"[]")]),n("td",null,"Same?")]),n("tr",null,[n("td",null,[n("code",null,".")]),n("td",null,[n("code",null,"?")]),n("td",null,"Same but different symbols")]),n("tr",null,[n("td",null,[n("code",null,"*")]),n("td",null,[n("code",null,"*")]),n("td",null,"Different")])])],-1),N=n("h3",{id:"the-brackets",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-brackets","aria-hidden":"true"},"#"),e(" The brackets "),n("code",null,"[]")],-1),P=n("p",null,[e("How "),n("code",null,"grep"),e(" and csh treat a "),n("code",null,"["),e(),n("strong",null,"without"),e(),n("code",null,"]"),e("?")],-1),G=n("h4",{id:"grep-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grep-1","aria-hidden":"true"},"#"),e(),n("code",null,"grep")],-1),U=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(` x
a`),n("span",{class:"token punctuation"},"["),e(`a
b`),n("span",{class:"token punctuation"},"]"),e(`b
cxc
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
e`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`e
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
% `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'['"),e(` x
grep: brackets `),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),e(),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),e(` not balanced
% `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'\\['"),e(` x
a`),n("span",{class:"token punctuation"},"["),e(`a
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
`),n("span",{class:"token comment"},"# grep consider a single unquoted [ as an incomplete pattern"),e(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br")])],-1),Z=n("h4",{id:"csh-wildcard",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#csh-wildcard","aria-hidden":"true"},"#"),e(" csh wildcard")],-1),V=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"ls"),e(`
`),n("span",{class:"token punctuation"},"["),e("	"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e("	x	x"),n("span",{class:"token punctuation"},"]"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),e(`
`),n("span",{class:"token punctuation"},"["),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"\\"),n("span",{class:"token punctuation"},"["),e(`
`),n("span",{class:"token punctuation"},"["),e(`
`),n("span",{class:"token comment"},"# csh do not think a [ without ] as a wildcard parttern but plain text"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br")])],-1),Y=n("h4",{id:"what-if-we-want-to-find-a",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-if-we-want-to-find-a","aria-hidden":"true"},"#"),e(' What if we want to find a "]"?')],-1),J=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"']'"),e(` x
b`),n("span",{class:"token punctuation"},"]"),e(`b
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
e`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`e
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"]"),e(`
% `),n("span",{class:"token function"},"ls"),e(" *"),n("span",{class:"token punctuation"},"]"),e(`*
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e("	x"),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token comment"},"# Both of them treat it as plain text"),e(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br")])],-1),K=n("h4",{id:"what-if-we-want-a-in-the-set",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-if-we-want-a-in-the-set","aria-hidden":"true"},"#"),e(' What if we want a "]" in the set?')],-1),X=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[x]]'"),e(` x
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
`),n("span",{class:"token comment"},"# the regex was interprete as [x] followed by ]"),e(`
% `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[x\\]]'"),e(` x
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
`),n("span",{class:"token comment"},"# this got interprete as [x\\] (x or \\) followed by ]"),e(`
% `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[]x]'"),e(` x
b`),n("span",{class:"token punctuation"},"]"),e(`b
cxc
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
e`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`e
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
`),n("span",{class:"token comment"},"# this one finally works. Because empty sets don't make sense"),e(`
`),n("span",{class:"token comment"},"# grep knew ] as the first element wasn't the end."),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br")])],-1),Q=n("h3",{id:"exercise-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exercise-1","aria-hidden":"true"},"#"),e(" Exercise")],-1),nn=n("p",null,[e("How would grep interprete "),n("code",null,"[^][^\\]")],-1),en=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Answer"),n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`\u250C a special [ which indicates the start of the set.
\u2502\u250C a special ^ which indicates a negate set.
\u2502\u2502\u250C a normal ], because it os the first element of a negate set.
\u2502\u2502\u2502\u250C a normal [, because [ isn't special inside a [].
\u2502\u2502\u2502\u2502\u250C a normal ^, one of the element in the set.
\u2502\u2502\u2502\u2502\u2502\u250C a normal \\, because \\ isn't special inside a [].
\u2502\u2502\u2502\u2502\u2502\u2502\u250C a special ] which indicates the end of the set.
\u2502\u2502\u2502\u2502\u2502\u2502\u2502
[^][^\\]
`)]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br")])]),n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"cat"),e(` x
a`),n("span",{class:"token punctuation"},"["),e(`a
b`),n("span",{class:"token punctuation"},"]"),e(`b
cxc
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
e`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`e
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
% `),n("span",{class:"token function"},"grep"),e(),n("span",{class:"token string"},"'[^][^\\]'"),e(` x
a`),n("span",{class:"token punctuation"},"["),e(`a
b`),n("span",{class:"token punctuation"},"]"),e(`b
cxc
d`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`d
e`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`e
fx`),n("span",{class:"token punctuation"},"]"),e("f"),n("span",{class:"token punctuation"},"\\"),e(`f
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"},"\xA0"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br")])])],-1),sn=n("h3",{id:"time-for-wilcards",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#time-for-wilcards","aria-hidden":"true"},"#"),e(" Time for wilcards")],-1),an=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token function"},"ls"),e(`
`),n("span",{class:"token punctuation"},"["),e("	"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e("	x	x"),n("span",{class:"token punctuation"},"]"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"]"),e("               "),n("span",{class:"token comment"},"# same as regex"),e(`
% `),n("span",{class:"token function"},"ls"),e(" *"),n("span",{class:"token punctuation"},"]"),e(`*
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),e("	"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e("	x"),n("span",{class:"token punctuation"},"]"),e("  "),n("span",{class:"token comment"},"# incomparable"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),e(`
`),n("span",{class:"token punctuation"},"["),e("               "),n("span",{class:"token comment"},"# different then regex"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),e("x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"["),e("	x           "),n("span",{class:"token comment"},"# same as regex"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),e("x"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`
x`),n("span",{class:"token punctuation"},"]"),e("              "),n("span",{class:"token comment"},"# same as regex"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("x"),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"]"),e("	x           "),n("span",{class:"token comment"},"# same as regex"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e("              "),n("span",{class:"token comment"},"# different then regex, wilcard consider it as normal []"),e(`
% `),n("span",{class:"token function"},"ls"),e(),n("span",{class:"token punctuation"},"["),e("x"),n("span",{class:"token punctuation"},"\\"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),e(`
`),n("span",{class:"token punctuation"},"]"),e("	x           "),n("span",{class:"token comment"},"# different than regex, the \\ isn't normal in the set"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br")])],-1),tn=n("div",{class:"custom-container danger"},[n("p",{class:"custom-container-title"},"Final Remarks"),n("p",null,[e("consider "),n("code",null,"grep 'AB*C' AB*C")]),n("ul",null,[n("li",null,[e("For the first argument "),n("code",null,"'AB*C'"),e(", notice the strong quotes, the shell send this argument as-is without quotes. And "),n("code",null,"grep"),e(" interprete it with regex rules.")]),n("li",null,[e("Whereas for the second argument "),n("code",null,"AB*C"),e(", the shell first do the wilcard expansion on it then send the resulting file name(s) to "),n("code",null,"grep"),e(".")])])],-1),ln=n("h2",{id:"more-regular-expression-syntax",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#more-regular-expression-syntax","aria-hidden":"true"},"#"),e(" More Regular Expression Syntax")],-1),on=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Expression"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"\\{x\\}")]),n("td",null,[e("Matches "),n("code",null,"x"),e(" repetitions of the preceding regex.")])]),n("tr",null,[n("td",null,[n("code",null,"\\{x,y\\}")]),n("td",null,[e("Matches "),n("code",null,"x"),e(" to "),n("code",null,"y"),e(" repetitions of the preceding regex.")])]),n("tr",null,[n("td",null,[n("code",null,"\\{,x\\}")]),n("td",null,[e("Matches if the number of repetitions of the preceding regex $\\leq$ "),n("code",null,"x"),e(".")])]),n("tr",null,[n("td",null,[n("code",null,"\\{x,\\}")]),n("td",null,[e("Matches if the number of repetitions of the preceding regex $\\geq$ "),n("code",null,"x"),e(".")])]),n("tr",null,[n("td",null,[n("code",null,"\\>")]),n("td",null,[e("The preceding regex must end at the end of a "),n("strong",null,"word"),e(".")])]),n("tr",null,[n("td",null,[n("code",null,"\\<")]),n("td",null,[e("The preceding regex must end at the start of a "),n("strong",null,"word"),e(".")])]),n("tr",null,[n("td",null,[n("code",null,"\\(...\\)")]),n("td",null,[e("Define a "),n("strong",null,"group"),e(" for a sub-portion of the regex. A group can be used before "),n("code",null,"*"),e(" or "),n("code",null,"\\{...\\}"),e(", which match the repetition of the entire group.")])]),n("tr",null,[n("td",null,[n("code",null,"\\1"),e(", "),n("code",null,"\\2"),e(", etc.")]),n("td",null,"Backreference. Identify a rematch to the earlier pattern. We'll see the detail below.")])])],-1),rn=n("h3",{id:"repetition",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#repetition","aria-hidden":"true"},"#"),e(" Repetition")],-1),cn=n("p",null,[e("Regex is "),n("strong",null,"GREEDY"),e(". By which it always takes the "),n("strong",null,"longest"),e(" possible match, without considering how this will affect later matches. Let's see some examples.")],-1),un=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Use -o to make grep print only the matching part of the lines."),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" happy "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'[a-z]\\{2,3\\}'"),e(`
hap
py
`),n("span",{class:"token comment"},"# It first matches as long as it can, i.e. 3 repetitions!"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" happ "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'[a-z]\\{2,3\\}'"),e(`
hap
`),n("span",{class:"token comment"},"# It can match 2 sets of 2 repetitions if it wants,"),e(`
`),n("span",{class:"token comment"},"# but it instead takes the longest match first."),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" happ "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'[a-z]\\{,3\\}'"),e(`
hap
p
% `),n("span",{class:"token builtin class-name"},"echo"),e(" happ "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'[a-z]\\{1,\\}'"),e(`
happ
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br")])],-1),pn=n("h3",{id:"the-end-of-a-word",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-end-of-a-word","aria-hidden":"true"},"#"),e(" The end of a word")],-1),dn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# How to split "),e(`
`),n("span",{class:"token comment"},"#   There are the others"),e(`
`),n("span",{class:"token comment"},"# into this "),e(`
`),n("span",{class:"token comment"},"#   There are"),e(`
`),n("span",{class:"token comment"},"#   the others"),e(`

`),n("span",{class:"token comment"},"# Use -i to make grep perform case insensitive matching."),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token string"},'"There are the others"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -io "),n("span",{class:"token string"},"'[a-z]*\\> [a-z]*\\> '"),e(`
There are                                       `),n("span",{class:"token comment"},"# \u2191________\u2191___ blank spaces here"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token string"},'"There are the others "'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -io "),n("span",{class:"token string"},"'[a-z]*\\> [a-z]*\\> '"),e(`
There are                 `),n("span",{class:"token comment"},"# \u2191______________________\u2191________\u2191__ blank spaces here"),e(`
the others
`),n("span",{class:"token comment"},"# We did it, but changing the input string is kind of cheating."),e(`
`),n("span",{class:"token comment"},"# we need to find a right regex pattern."),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token string"},'"There are the others"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -io "),n("span",{class:"token string"},"'[a-z]*\\> [a-z]*\\>'"),e(`
There are                                       `),n("span",{class:"token comment"},"# \u2191____________ blank spaces here"),e(`
 the                                            `),n("span",{class:"token comment"},"# \u2502"),e(`
 others                                         `),n("span",{class:"token comment"},"# \u2502"),e(`
`),n("span",{class:"token comment"},"# The start of 2nd and 3rd matches are matched to \u2518"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token string"},'"There are the others"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -io "),n("span",{class:"token string"},"'[a-z]*\\> [a-z]*\\> *'"),e(`
There are 
the others
`),n("span",{class:"token comment"},"# Finally, the solution is to make the last space optional."),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br")])],-1),hn=n("p",null,[e("Let's see what is considered as a "),n("strong",null,"word"),e(".")],-1),bn=n("p",null,[n("code",null,`% echo "e,e;e-e+e_e:e5e.e?e"\\!e\\"e\\'e | grep --color 'e\\>'`)],-1),mn=n("p",null,[n("span",{style:{color:"red"}},"e"),e(","),n("span",{style:{color:"red"}},"e"),e(":"),n("span",{style:{color:"red"}},"e"),e("-"),n("span",{style:{color:"red"}},"e"),e("+e_"),n("span",{style:{color:"red"}},"e"),e(":e5"),n("span",{style:{color:"red"}},"e"),e("."),n("span",{style:{color:"red"}},"e"),e("?"),n("span",{style:{color:"red"}},"e"),e('"'),n("span",{style:{color:"red"}},"e"),e("'"),n("span",{style:{color:"red"}},"e")],-1),gn=n("p",null,[e("So punctuation and newline are OK, but "),n("strong",null,"underscore"),e(" and "),n("strong",null,"number"),e(" are not.")],-1),kn=n("h3",{id:"the-start-of-a-word",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-start-of-a-word","aria-hidden":"true"},"#"),e(" The start of a word")],-1),fn=n("p",null,"Why is it necessary? Let's see an example",-1),_n=n("p",null,[n("code",null,`% echo "There are the others" | grep -i --color '\\<the'`)],-1),xn=n("p",null,[n("span",{style:{color:"red"}},"The"),e("re are "),n("span",{style:{color:"red"}},"the"),e(" others")],-1),yn=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"None of These Find The Same Matches"),n("p",null,[n("code",null,`% echo "There are the others" | grep -i --color ' the'`)]),n("p",null,[e("There are "),n("span",{style:{color:"red"}},"the"),e(" others")]),n("p",null,[n("code",null,`% echo "There are the others" | grep -i --color '^the'`)]),n("p",null,[n("span",{style:{color:"red"}},"The"),e("re are the others")]),n("p",null,[n("code",null,`% echo "There are the others" | grep -i --color 'the'`)]),n("p",null,[n("span",{style:{color:"red"}},"The"),e("re are "),n("span",{style:{color:"red"}},"the"),e(" o"),n("span",{style:{color:"red"}},"the"),e("rs")])],-1),wn=n("div",{class:"custom-container danger"},[n("p",{class:"custom-container-title"},"The Closest You Can Get Without \\<"),n("p",null,[n("code",null,`% echo "There are the others" | grep -i --color -e ' the' -e '^the'`)]),n("p",null,[n("span",{style:{color:"red"}},"The"),e("re are "),n("span",{style:{color:"red"}},"the"),e(" others")]),n("p",null,"However, it's still not the same."),n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token builtin class-name"},"echo"),e(),n("span",{class:"token string"},'"There are the others"'),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -io -e "),n("span",{class:"token string"},"' the'"),e(" -e "),n("span",{class:"token string"},"'^the'"),e(`
The
 the
`),n("span",{class:"token comment"},"# Notice the blank is also captured along with `the`"),e(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br")])])],-1),vn=n("h3",{id:"group",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#group","aria-hidden":"true"},"#"),e(" Group")],-1),zn=n("p",null,"Let's find a pair of a consonant followed by a vowel.",-1),Tn=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[e("% "),n("span",{class:"token builtin class-name"},"echo"),e(" irregulars "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'[b-df-hj-np-tv-z][aeiou][b-df-hj-np-tv-z][aeiou]'"),e(`
regu
`),n("span",{class:"token comment"},"# could we make the regex shorter"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" irregulars "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'\\([b-df-hj-np-tv-z][aeiou]\\)\\{2\\}'"),e(`
regu
`),n("span",{class:"token comment"},"# we can even find more pairs of it"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" irregulars "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'\\([b-df-hj-np-tv-z][aeiou]\\)*'"),e(`
regula
`),n("span",{class:"token comment"},"# or put the vowel in the front"),e(`
% `),n("span",{class:"token builtin class-name"},"echo"),e(" irregulars "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'\\([aeiou][b-df-hj-np-tv-z]\\)*'"),e(`
ir
egular
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br")])],-1),Bn=n("h3",{id:"backreference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#backreference","aria-hidden":"true"},"#"),e(" Backreference")],-1),An=n("p",null,[e("Backreference let you identify a rematch to the earlier pattern. Noted that it rematched the "),n("strong",null,"text"),e(" instead of reusing the "),n("strong",null,"pattern"),e(".")],-1),En=n("p",null,[n("span",{style:{color:"green"}},"\\([a-z]\\)"),n("span",{style:{color:"red"}},"\\([a-z]\\)"),n("span",{style:{color:"green"}},"\\1"),n("span",{style:{color:"red"}},"\\2")],-1),Sn=n("p",null,[e("b"),n("span",{style:{color:"green"}},"a"),n("span",{style:{color:"red"}},"n"),n("span",{style:{color:"green"}},"a"),n("span",{style:{color:"red"}},"n"),e("a")],-1),Fn=n("p",null,[n("span",{style:{color:"green"}},"n"),n("span",{style:{color:"red"}},"o"),n("span",{style:{color:"green"}},"n"),n("span",{style:{color:"red"}},"o"),e("gram")],-1),Dn=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"Double-match"),n("p",null,[e(`"banana" is a double-match , because there's ba`),n("span",{style:{color:"green"}},"n"),n("span",{style:{color:"red"}},"a"),n("span",{style:{color:"green"}},"n"),n("span",{style:{color:"red"}},"a"),e(".")]),n("p",null,[e("However, "),n("code",null,"grep"),e(" scans from left to right.")])],-1),Cn=n("h4",{id:"backreferencing-palindromes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#backreferencing-palindromes","aria-hidden":"true"},"#"),e(" Backreferencing palindromes")],-1),$n=n("div",{class:"language-bash ext-sh line-numbers-mode"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# 3-letter palindromes"),e(`
% `),n("span",{class:"token function"},"cat"),e(" File "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'\\<\\([a-z]\\)[a-z]\\1\\>'"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"sort"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"uniq"),e(`
did
eve
eye
wow
`),n("span",{class:"token comment"},"# 4-letter palindromes"),e(`
% `),n("span",{class:"token function"},"cat"),e(" File "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o "),n("span",{class:"token string"},"'\\<\\([a-z]\\)\\([a-z]\\)\\2\\1\\>'"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"sort"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"uniq"),e(`
sees
`),n("span",{class:"token comment"},"# 3-6-letter palindromes"),e(`
% `),n("span",{class:"token function"},"cat"),e(" File "),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"grep"),e(" -o"),n("span",{class:"token punctuation"},"\\"),e(`
? -e `),n("span",{class:"token string"},"'\\<\\([a-z]\\)[a-z]\\1\\>'"),n("span",{class:"token punctuation"},"\\"),e(`
? -e `),n("span",{class:"token string"},"'\\<\\([a-z]\\)\\([a-z]\\)\\2\\1\\>'"),n("span",{class:"token punctuation"},"\\"),e(`
? -e `),n("span",{class:"token string"},"'\\<\\([a-z]\\)\\([a-z]\\)[a-z]\\2\\1\\>'"),n("span",{class:"token punctuation"},"\\"),e(`
? -e `),n("span",{class:"token string"},"'\\<\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\3\\2\\1\\>'"),n("span",{class:"token punctuation"},"\\"),e(`
? `),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"sort"),e(),n("span",{class:"token operator"},"|"),e(),n("span",{class:"token function"},"uniq"),e(`
did
eve
eye
level
madam
redder
sees
wow
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br")])],-1),qn=n("h3",{id:"posix-built-in-patterns",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#posix-built-in-patterns","aria-hidden":"true"},"#"),e(" POSIX built-in patterns")],-1),In=n("p",null,"There are also some built-in characters sets that you can type in a blaze.",-1),jn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Character Group"),n("th",null,"Meaning")])]),n("tbody",null,[n("tr",null,[n("td",null,"[:alnum:]"),n("td",null,"Alphanumeric")]),n("tr",null,[n("td",null,"[:cntrl:]"),n("td",null,"Control character")]),n("tr",null,[n("td",null,"[:lower:]"),n("td",null,"Lower case character")]),n("tr",null,[n("td",null,"[:space:]"),n("td",null,"Whitespace")]),n("tr",null,[n("td",null,"[:alpha:]"),n("td",null,"Alphabetic")]),n("tr",null,[n("td",null,"[:digit:]"),n("td",null,"Digit")]),n("tr",null,[n("td",null,"[:print:]"),n("td",null,"Printable character")]),n("tr",null,[n("td",null,"[:upper:]"),n("td",null,"Upper case character")]),n("tr",null,[n("td",null,"[:blank:]"),n("td",null,"Whitespace, tab, etc.")]),n("tr",null,[n("td",null,"[:graph:]"),n("td",null,"Printable and visible characters")]),n("tr",null,[n("td",null,"[:punct:]"),n("td",null,"Punctuation")]),n("tr",null,[n("td",null,"[:xdigit:]"),n("td",null,"Extended Digit")])])],-1),Wn=n("h2",{id:"extended-regular-expressions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extended-regular-expressions","aria-hidden":"true"},"#"),e(" Extended Regular Expressions")],-1),Rn=n("p",null,"The languages specifiable by regular expressions can be extended in 2 ways:",-1),Mn=n("ol",null,[n("li",null,[e("To make them easier to write "),n("ul",null,[n("li",null,"This does not alter the expressivity, i.e. you can only specifiy the same range of languages")])]),n("li",null,[e("To allow a choice of patterns "),n("ul",null,[n("li",null,"The OR operation")])])],-1),Ln=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Symbol"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"?")]),n("td",null,[e("Makes the preceding expression optional, i.e. "),n("code",null,"\\{0,1\\}"),e(".")])]),n("tr",null,[n("td",null,[n("code",null,"+")]),n("td",null,[e("Requires the preceding expression to occur "),n("strong",null,"at least once"),e(", i.e. "),n("code",null,"\\{1,\\}"),e(".")])]),n("tr",null,[n("td",null,"`"),n("td",null,"`")]),n("tr",null,[n("td",null,[n("code",null,"()")]),n("td",null,"Can be used to change the associatibity of `")])])],-1),Hn=n("p",null,[e("Use "),n("code",null,"egrep"),e(" to use extended regex!")],-1),On=n("p",null,[n("code",null,`% echo "multiple bananas" | egrep --color '[aeiou][b-df-hj-np-tv-z][aeiou]*'`)],-1),Nn=n("p",null,[e("m"),n("span",{style:{color:"red"}},"ul"),e("t"),n("span",{style:{color:"red"}},"ip"),e("le b"),n("span",{style:{color:"red"}},"ana"),e("n"),n("span",{style:{color:"red"}},"as")],-1),Pn=n("p",null,[n("code",null,`% echo "multiple bananas" | egrep --color '[aeiou]([b-df-hj-np-tv-z][aeiou])*'`)],-1),Gn=n("p",null,[e("m"),n("span",{style:{color:"red"}},"u"),e("lt"),n("span",{style:{color:"red"}},"i"),e("pl"),n("span",{style:{color:"red"}},"e"),e(" b"),n("span",{style:{color:"red"}},"anana"),e("s")],-1),Un=n("p",null,[n("code",null,`% echo "multiple bananas" | egrep --color '[aeiou][b-df-hj-np-tv-z][aeiou]+'`)],-1),Zn=n("p",null,[e("multiple b"),n("span",{style:{color:"red"}},"ana"),e("nas")],-1),Vn=n("p",null,[n("code",null,`% echo "multiple bananas" | egrep --color '[aeiou]([b-df-hj-np-tv-z][aeiou])+'`)],-1),Yn=n("p",null,[e("multiple b"),n("span",{style:{color:"red"}},"anana"),e("s")],-1),Jn=n("p",null,[n("code",null,`% echo "multiple bananas" | egrep --color '[aeiou]([b-df-hj-np-tv-z][aeiou])?'`)],-1),Kn=n("p",null,[e("m"),n("span",{style:{color:"red"}},"u"),e("lt"),n("span",{style:{color:"red"}},"i"),e("pl"),n("span",{style:{color:"red"}},"e"),e(" b"),n("span",{style:{color:"red"}},"ana"),e("n"),n("span",{style:{color:"red"}},"a"),e("s")],-1),Xn=n("h3",{id:"compare-grep-and-egrep",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compare-grep-and-egrep","aria-hidden":"true"},"#"),e(" Compare "),n("code",null,"grep"),e(" and "),n("code",null,"egrep")],-1),Qn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Expression"),n("th",null,[e("In "),n("code",null,"grep")]),n("th",null,[e("In "),n("code",null,"egrep")])])]),n("tbody",null,[n("tr",null,[n("td",null,"`abc"),n("td",null,"def`"),n("td",null,"the string `abc")]),n("tr",null,[n("td",null,"`(a$)"),n("td",null,"(b(c"),n("td",null,"d)e)`")]),n("tr",null,[n("td",null,[n("code",null,"ab+c")]),n("td",null,[e("the string "),n("code",null,"ab+c")]),n("td",null,[n("code",null,"abc"),e(" or "),n("code",null,"abbc"),e(", or "),n("code",null,"abbbc"),e(", etc.")])]),n("tr",null,[n("td",null,[n("code",null,"\\([ab]\\)\\1")]),n("td",null,[n("code",null,"aa"),e(" or "),n("code",null,"bb")]),n("td",null,[n("code",null,"(a)1"),e(" or "),n("code",null,"(b)1")])]),n("tr",null,[n("td",null,[n("code",null,"a\\{2")]),n("td",null,"an error, closing } not found"),n("td",null,[n("code",null,"a{2")])]),n("tr",null,[n("td",null,[n("code",null,"\\<a")]),n("td",null,[e("words begin with "),n("code",null,"a")]),n("td",null,[n("code",null,"<a"),e(" (in standard egrep)")])])])],-1),ne=n("h4",{id:"how-they-identify-numbers-in-lexical-analysis-for-some-programming-language",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-they-identify-numbers-in-lexical-analysis-for-some-programming-language","aria-hidden":"true"},"#"),e(" How they identify "),n("strong",null,"numbers"),e(" in lexical analysis for some programming language")],-1),ee=n("h5",{id:"state-diagram",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#state-diagram","aria-hidden":"true"},"#"),e(" State diagram")],-1),se=n("p",null,[e("Define "),n("strong",null,"digit"),e(" as "),n("code",null,"[0-9]"),e(" in regex "),n("img",{src:c,alt:"number"})],-1),ae=n("h5",{id:"grep-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grep-2","aria-hidden":"true"},"#"),e(),n("code",null,"grep")],-1),te=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`[+-]\\{,1\\}[0-9]\\{1,\\}\\(\\.[0-9]\\{1,\\}\\)\\{,1\\}\\([Ee][+-]\\{,1\\}[0-9]\\{1,\\}\\)\\{,1\\}
`)]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),le=n("h5",{id:"egrep",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#egrep","aria-hidden":"true"},"#"),e(),n("code",null,"egrep")],-1),oe=n("div",{class:"language-text ext-text line-numbers-mode"},[n("pre",{class:"language-text"},[n("code",null,`[+-]?[0-9]+(\\.[0-9]+)?([Ee][+-]?[0-9]+)?
`)]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br")])],-1),re=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("code",null,"grep")]),n("th",null,[n("code",null,"egrep")])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"[+-]\\{,1\\}")]),n("td",null,[n("code",null,"[+-]?")])]),n("tr",null,[n("td",null,[n("code",null,"[0-9]\\{1,\\}")]),n("td",null,[n("code",null,"[0-9]+")])]),n("tr",null,[n("td",null,[n("code",null,"\\(\\.[0-9]\\{1,\\}\\)\\{,1\\}")]),n("td",null,[n("code",null,"(\\.[0-9]+)?")])]),n("tr",null,[n("td",null,[n("code",null,"\\([Ee][+-]\\{,1\\}[0-9]\\{1,\\}\\)\\{,1\\}")]),n("td",null,[n("code",null,"([Ee][+-]?[0-9]+)?")])])])],-1);function ce(ie,ue){return t(),a(l,null,[u,p,d,h,b,m,g,k,f,_,x,y,w,v,z,T,B,A,E,S,F,D,C,$,q,I,j,W,R,M,L,H,O,N,P,G,U,Z,V,Y,J,K,X,Q,nn,en,sn,an,tn,ln,on,rn,cn,un,pn,dn,hn,bn,mn,gn,kn,fn,_n,xn,yn,wn,vn,zn,Tn,Bn,An,En,Sn,Fn,Dn,Cn,$n,qn,In,jn,Wn,Rn,Mn,Ln,Hn,On,Nn,Pn,Gn,Un,Zn,Vn,Yn,Jn,Kn,Xn,Qn,ne,ee,se,ae,te,le,oe,re],64)}var he=o(i,[["render",ce]]);export{he as default};
