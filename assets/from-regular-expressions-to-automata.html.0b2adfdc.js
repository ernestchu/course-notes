import{c as s,o as n,F as o,a as e,d as t}from"./app.bdc3a143.js";import{_ as a}from"./plugin-vue_export-helper.5a098b48.js";var r="/course-notes/assets/character.977791b3.svg",l="/course-notes/assets/concatenation.ee19945e.svg",i="/course-notes/assets/alternative.ac27dcbb.svg",h="/course-notes/assets/repetition.e04a4d50.svg",c="/course-notes/assets/example-1.8ea2e17a.svg",d="/course-notes/assets/example-2.e084e6a5.svg",u="/course-notes/assets/a-star-nfa.0411109e.svg",_="/course-notes/assets/a-star-dfa.9ea0b4d5.svg",p="/course-notes/assets/example-3-nfa.86b59214.svg",m="/course-notes/assets/example-3-dfa.6d364220.svg",g="/course-notes/assets/example-4-nfa.45292d62.svg",f="/course-notes/assets/example-4-dfa.b0dfd30a.svg";const x={},v=e("h1",{id:"from-regular-expressions-to-automata",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#from-regular-expressions-to-automata","aria-hidden":"true"},"#"),t(" From Regular Expressions to Automata")],-1),$=e("p",null,"The regular expression is the notation of choice for describing lexical analyzers and other pattern-processing software. However, implementation of that software requires the simulation of a DFA.",-1),w=e("p",null,[t("In this section we shall first show how to convert regular expressions to NFA's using "),e("strong",null,"Thompson's construction"),t(". Next, we show how to convert NFA's to DFA's using the "),e("strong",null,"subset construction"),t(".")],-1),b=e("h2",{id:"from-a-regular-expression-to-an-nfa",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#from-a-regular-expression-to-an-nfa","aria-hidden":"true"},"#"),t(" From a Regular Expression to an NFA")],-1),A=e("p",null,"Consider the following basic element of regular expressions",-1),F=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Element"),e("th",null,"Example")])]),e("tbody",null,[e("tr",null,[e("td",null,"Empty string"),e("td",null,"$\\lambda , \\epsilon$")]),e("tr",null,[e("td",null,"Character"),e("td",null,"a")]),e("tr",null,[e("td",null,"Concatenation"),e("td",null,"AB")]),e("tr",null,[e("td",null,"Alternative"),e("td",null,"A|B")]),e("tr",null,[e("td",null,"Repetition"),e("td",null,"A*")])])],-1),N=e("p",null,"We shall see how to use NFA transition graphs to recognize them.",-1),E=e("h4",{id:"empty-string-character",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#empty-string-character","aria-hidden":"true"},"#"),t(" Empty string & character")],-1),y=e("p",null,[e("img",{src:r,alt:"character"})],-1),T=e("h4",{id:"concatenation",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#concatenation","aria-hidden":"true"},"#"),t(" Concatenation")],-1),B=e("p",null,[e("img",{src:l,alt:"concatenation"})],-1),C=e("p",null,"Where the dashed arrows mean that there could be multiple states and transitions within A and B respectively.",-1),R=e("h4",{id:"alternative",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#alternative","aria-hidden":"true"},"#"),t(" Alternative")],-1),k=e("p",null,[e("img",{src:i,alt:"alternative"})],-1),D=e("h4",{id:"repetition",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repetition","aria-hidden":"true"},"#"),t(" Repetition")],-1),q=e("p",null,[e("img",{src:h,alt:"Repetition"})],-1),W=e("h3",{id:"example",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example","aria-hidden":"true"},"#"),t(" Example")],-1),j=e("p",null,[t("Translate the regular expression "),e("code",null,"ab|a"),t(" into an NFA according to Thompson's construction.")],-1),z=e("p",null,[t("First, use the "),e("strong",null,"concatenation"),t(" technique on "),e("code",null,"ab")],-1),H=e("p",null,[e("img",{src:c,alt:"example-1"})],-1),I=e("p",null,[t("Then we form another copy of the machine for "),e("code",null,"a"),t(" and use the "),e("strong",null,"alternative"),t(" technique get the complete NFA for "),e("code",null,"ab|a")],-1),V=e("p",null,[e("img",{src:d,alt:"example-2"})],-1),L=e("h2",{id:"from-an-nfa-to-a-dfa",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#from-an-nfa-to-a-dfa","aria-hidden":"true"},"#"),t(" From an NFA to a DFA")],-1),P=e("p",null,"For each state $s$, the closure set ${ \\overline{s} }$ is a set of NFA states reachable from NFA state $s$ on $\\epsilon$-transitions alone.",-1),G=e("p",null,[t("Consider the following NFA corresponding to the regular expression "),e("code",null,"a*"),t(" under Thompson\u2019s construction")],-1),J=e("p",null,[e("img",{src:u,alt:"a-star-nfa"})],-1),K=e("p",null,"In this NFA, we have",-1),M=e("ul",null,[e("li",null,"${ \\overline{1} } = { 1,2,4 }$"),e("li",null,"${ \\overline{2} } = { 2 }$"),e("li",null,"${ \\overline{3} } = { 2,3,4 }$"),e("li",null,"${ \\overline{4} } = { 4 }$")],-1),O=e("p",null,"As we can see, the closure set ${ \\overline{s} }$ for state $s$ must contains itself. Next, we shall find the transitions between these closure sets. We start from ${ \\overline{1} } = { 1,2,4 }$, and we examine what states we can go to from state 1, 2 and 4 but not using $\\epsilon$-transition. Here, there's only one transition, $a$, therefore",-1),Q=e("p",null,"${ 1,2,3 } \\xrightarrow{a} { 3 }$",-1),S=e("p",null,"And keep going with ${ \\overline{3} }$",-1),U=e("p",null,"${ \\overline{3} } = { 2,3,4 }$",-1),X=e("p",null,"By now, we've walk through all of the transitions and we get a DFA transition graph",-1),Y=e("p",null,[e("img",{src:_,alt:"a-star-dfa"})],-1),Z=e("h3",{id:"example-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example-1","aria-hidden":"true"},"#"),t(" Example 1")],-1),ee=e("p",null,"Let's look at a more complicated example",-1),te=e("p",null,[e("img",{src:p,alt:"example-3-nfa"})],-1),se=e("p",null,"Perform the same procedures as above",-1),ne=e("p",null,"$$\\begin{matrix} & & { \\overline{1} } & = & { 1,2,6 } \\ { 1,2,6 } & \\xrightarrow{a} & { \\overline{3,7} } & = & { 3,7,4,8 } \\ { 3,7,4,8 } & \\xrightarrow{b} & { \\overline{5} } & = & { 5,8 } \\ \\end{matrix}$$",-1),oe=e("p",null,"Noted that if the new state contains a final state, then it becomes a final state as well.",-1),ae=e("p",null,[e("img",{src:m,alt:"example-3-dfa"})],-1),re=e("h3",{id:"example-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example-2","aria-hidden":"true"},"#"),t(" Example 2")],-1),le=e("p",null,"Consider the regular expression and the corresponding NFA transition graph",-1),ie=e("p",null,[e("code",null,"letter(letter|digit)*")],-1),he=e("p",null,[e("img",{src:g,alt:"example-4-nfa"})],-1),ce=e("p",null,"$$\\begin{matrix} & & { \\overline{1} } & = & { 1 } \\ { 1 } & \\xrightarrow{letter} & { \\overline{2} } & = & { 2,3,4,5,7,10 } \\ { 2,3,4,5,7,10 } & \\xrightarrow{letter} & { \\overline{6} } & = & { 6,9,10,4,5,7 } \\ { 2,3,4,5,7,10 } & \\xrightarrow{digit} & { \\overline{8} } & = & { 8,9,10,4,5,7 } \\ { \\overline{6} } & \\xrightarrow{letter} & { \\overline{6} } & = & { 6,9,10,4,5,7 } \\ { \\overline{6} } & \\xrightarrow{digit} & { \\overline{8} } & = & { 8,9,10,4,5,7 } \\ { \\overline{8} } & \\xrightarrow{letter} & { \\overline{6} } & = & { 6,9,10,4,5,7 } \\ { \\overline{8} } & \\xrightarrow{digit} & { \\overline{8} } & = & { 8,9,10,4,5,7 } \\ \\end{matrix}$$",-1),de=e("p",null,[e("img",{src:f,alt:"example-4-dfa"})],-1);function ue(_e,pe){return n(),s(o,null,[v,$,w,b,A,F,N,E,y,T,B,C,R,k,D,q,W,j,z,H,I,V,L,P,G,J,K,M,O,Q,S,U,X,Y,Z,ee,te,se,ne,oe,ae,re,le,ie,he,ce,de],64)}var fe=a(x,[["render",ue]]);export{fe as default};
