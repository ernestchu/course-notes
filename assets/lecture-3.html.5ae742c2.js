import{c as e,o as a,F as l,a as s,d as n}from"./app.bdc3a143.js";import{_ as t}from"./plugin-vue_export-helper.5a098b48.js";var c="/course-notes/assets/source.97295306.png";const o={},r=s("h1",{id:"lecture-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lecture-3","aria-hidden":"true"},"#"),n(" Lecture 3")],-1),i=s("h2",{id:"miscellaneous-commands",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#miscellaneous-commands","aria-hidden":"true"},"#"),n(" Miscellaneous Commands")],-1),u=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Command"),s("th",null,"Description")])]),s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,"sort (-gkrsR)")]),s("td",null,"Sort the lines of a file")]),s("tr",null,[s("td",null,[s("code",null,"uniq (-c)")]),s("td",null,"Delete repeated lines (leave unique lines)")]),s("tr",null,[s("td",null,[s("code",null,"tr (-dc)")]),s("td",null,"Replace (translate) or delete characteers")]),s("tr",null,[s("td",null,[s("code",null,"expr")]),s("td",null,"Calculate an expression from arguments")]),s("tr",null,[s("td",null,[s("code",null,"seq")]),s("td",null,"Create a sequence of numbers, 1 per line")])])],-1),p=s("h3",{id:"sort",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sort","aria-hidden":"true"},"#"),n(" sort")],-1),b=s("p",null,"Some useful flags:",-1),h=s("ul",null,[s("li",null,[s("code",null,"-r"),n(": "),s("strong",null,"sort in reverse order.")]),s("li",null,[s("code",null,"-g"),n(": "),s("strong",null,"performs a numeric sort."),n(" if no "),s("code",null,"-g"),n(", then it is "),s("strong",null,"alphabetic"),n(" sort, meaning that "),s("strong",null,"10"),n(" goes before "),s("strong",null,"2")]),s("li",null,[s("code",null,"-k"),n(": "),s("strong",null,"allows you to sort on different fields."),n(" e.g. "),s("code",null,"sort -k3"),n(" sorts on the 3"),s("sup",null,"rd"),n(" field.")]),s("li",null,[s("code",null,"-s"),n(": "),s("strong",null,"keeps lines that in the same sorting order maintain the original order."),n(" e.g. "),s("code",null,"sort -k3 | sort -sk5"),n(" sorts based on the 5"),s("sup",null,"th"),n(" field, with the 3"),s("sup",null,"rd"),n(" field as a tie-breaker.")]),s("li",null,[s("code",null,"-R"),n(": "),s("strong",null,"sort in random order")])],-1),m=s("h3",{id:"uniq",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#uniq","aria-hidden":"true"},"#"),n(" uniq")],-1),d=s("p",null,[s("code",null,"uniq"),n(" erases duplicate lines. However, it does not search the whole file but the preceding line.")],-1),k=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"cat"),n(` File
AA
BB
BB
AA
BB
% `),s("span",{class:"token function"},"cat"),n(" File "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"uniq"),n(`
AA
BB
AA
BB
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),g=s("p",null,[n("Therefore "),s("code",null,"uniq"),n(" is often used with "),s("code",null,"sort"),n(" to first make all duplicates adjacent.")],-1),f=s("h3",{id:"tr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tr","aria-hidden":"true"},"#"),n(" tr")],-1),v=s("h4",{id:"encoding",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#encoding","aria-hidden":"true"},"#"),n(" Encoding")],-1),_=s("p",null,[n("Perform "),s("strong",null,"ROT13"),n(" encoding on file.txt")],-1),y=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'"a-zA-Z"'),n(),s("span",{class:"token string"},'"n-za-mN-ZA-M"'),n(),s("span",{class:"token operator"},"<"),n(" file.txt "),s("span",{class:"token operator"},">"),n(` file.enc
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br")])],-1),w=s("p",null,"Since there're 26 letters in English, we can use the same command to decode it.",-1),x=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'"a-zA-Z"'),n(),s("span",{class:"token string"},'"n-za-mN-ZA-M"'),n(),s("span",{class:"token operator"},"<"),n(" file.enc "),s("span",{class:"token operator"},">"),n(` file.dec
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br")])],-1),$=s("h4",{id:"delete",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#delete","aria-hidden":"true"},"#"),n(" Delete")],-1),A=s("p",null,[n("If you want to delete characters, use "),s("code",null,"tr -d"),n(" with one arguments. The flag "),s("code",null,"-c"),n(" (complement) may be used with the "),s("code",null,"-d"),n(" flag to delte everythig except for the set.")],-1),B=s("h4",{id:"corpus",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#corpus","aria-hidden":"true"},"#"),n(" Corpus")],-1),C=s("p",null,"Get corpus from a file contains lots of words.",-1),S=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),n(" ManyWords "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'" "'),n(),s("span",{class:"token string"},[n('"'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(" -cd "),s("span",{class:"token string"},[n('"a-zA-Z'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"sort"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"uniq"),n(),s("span",{class:"token operator"},">"),n(` corpus
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br")])],-1),T=s("p",null,"if we want it to be case-insensitive",-1),X=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),n(" ManyWords "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'" "'),n(),s("span",{class:"token string"},[n('"'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(" -cd "),s("span",{class:"token string"},[n('"a-zA-Z'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'"A-Z"'),n(),s("span",{class:"token string"},'"a-z"'),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"sort"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"uniq"),n(),s("span",{class:"token operator"},">"),n(` corpus
`),s("span",{class:"token comment"},"# Or in a more consice form"),n(`
`),s("span",{class:"token function"},"cat"),n(" ManyWords "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(),s("span",{class:"token string"},'"A-Z "'),n(),s("span",{class:"token string"},[n('"a-z'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tr"),n(" -cd "),s("span",{class:"token string"},[n('"a-z'),s("span",{class:"token entity",title:"\\n"},"\\n"),n('"')]),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"sort"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"uniq"),n(),s("span",{class:"token operator"},">"),n(` corpus

`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br")])],-1),z=s("h2",{id:"more-miscellaneous-commands",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#more-miscellaneous-commands","aria-hidden":"true"},"#"),n(" More Miscellaneous Commands")],-1),W=s("h3",{id:"split",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#split","aria-hidden":"true"},"#"),n(" split")],-1),Y=s("p",null,[s("code",null,"split"),n(" splits a file into a set of smaller files, each with the indicated numver of bytes or lines.")],-1),q=s("h3",{id:"touch",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#touch","aria-hidden":"true"},"#"),n(" touch")],-1),M=s("p",null,[s("code",null,"touch"),n(" literally "),s("strong",null,"touches"),n(" the file. Many including me thought it was for creating files, but it actually touches the file and consequently update a file's "),s("strong",null,"timestamp"),n(". If the file doesn't exist, create it.")],-1),U=s("h3",{id:"which",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#which","aria-hidden":"true"},"#"),n(" which")],-1),I=s("p",null,[s("code",null,"which"),n(" identifies where an executable is located. In fact, just like your "),s("code",null,"a,out"),n(" generated by "),s("code",null,"gcc"),n(", all the commands you've learned so far are essentially a executable, so there must be some places to store all these executables. That brings us to the next part of this note.")],-1),F=s("h2",{id:"shell-basic",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell-basic","aria-hidden":"true"},"#"),n(" Shell Basic")],-1),N=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,`gcc main.c
./a.out
`)]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br")])],-1),E=s("p",null,[n("You've probably done this before. The above command calls GNU C Compiler to compile a c source code into an executable, then executes it. More specifically, the shell "),s("strong",null,"forks"),n(" a new process by executing gcc. When it finished, the shell then forks a new process running your program.")],-1),Z=s("p",null,[s("img",{src:c,alt:"source"})],-1),H=s("p",null,[n("On the other hand, if you use "),s("strong",null,"source"),n(", the action is placed on the current process, that is, the shell. Common files that we would use "),s("strong",null,"source"),n(" include")],-1),j=s("ul",null,[s("li",null,[s("strong",null,"shell configuration files:"),n(" e.g., "),s("code",null,".zshrc"),n(", "),s("code",null,".bashrc"),n(", because we want to see the config takes place in the current shell.")]),s("li",null,[s("strong",null,"shell scripts:"),n(" a shell script is a list of commands that you can run just by one execution on the script. If you execute it without "),s("code",null,"source"),n(", you fork a new shell and execute the commands, and vice versa.")])],-1),O=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"source"),n(` .zshrc
`),s("span",{class:"token builtin class-name"},"source"),n(` myscript.sh
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br")])],-1),D=s("h3",{id:"why-which",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-which","aria-hidden":"true"},"#"),n(" Why which")],-1),R=s("p",null,[n("We said that all those commands are just like your "),s("code",null,"a.out"),n(", executables, but why we use "),s("code",null,"./a.out"),n(" but "),s("code",null,"ls"),n(" without dot-slash?")],-1),V=s("p",null,[n("Because the dot-slash specifies that the file "),s("code",null,"a.out"),n(" is under the current directory. However "),s("code",null,"ls"),n(" and other commands are not in there. Where to find them? Try this")],-1),L=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token environment constant"},"$PATH"),n(`
/usr/local/opt/tcl-tk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/Library/Apple/usr/bin
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br")])],-1),P=s("p",null,[s("code",null,"$PATH"),n(" is a predefined variable that stores the directories containing the command executables. The directories are seperated by colons, let's look into "),s("code",null,"/bin")],-1),G=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"ls"),n(` /bin
`),s("span",{class:"token punctuation"},"["),n("		dash	"),s("span",{class:"token function"},"expr"),n("		"),s("span",{class:"token function"},"ln"),n("		"),s("span",{class:"token builtin class-name"},"pwd"),n("		"),s("span",{class:"token function"},"sync"),n(`
`),s("span",{class:"token function"},"bash"),n("	"),s("span",{class:"token function"},"date"),n("	"),s("span",{class:"token function"},"hostname"),n("	"),s("span",{class:"token function"},"ls"),n("		"),s("span",{class:"token function"},"rm"),n(`		tcsh
`),s("span",{class:"token function"},"cat"),n("		"),s("span",{class:"token function"},"dd"),n("		"),s("span",{class:"token function"},"kill"),n("		"),s("span",{class:"token function"},"mkdir"),n("	"),s("span",{class:"token function"},"rmdir"),n("	"),s("span",{class:"token builtin class-name"},"test"),n(`
`),s("span",{class:"token function"},"chmod"),n("	"),s("span",{class:"token function"},"df"),n("		ksh		    "),s("span",{class:"token function"},"mv"),n("		"),s("span",{class:"token function"},"sh"),n(`		unlink
`),s("span",{class:"token function"},"cp"),n("		"),s("span",{class:"token builtin class-name"},"echo"),n("	launchctl	pax		"),s("span",{class:"token function"},"sleep"),n(`	wait4path
csh		ed		`),s("span",{class:"token function"},"link"),n("		"),s("span",{class:"token function"},"ps"),n("		stty	"),s("span",{class:"token function"},"zsh"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])],-1),K=s("p",null,[n("Something familiar? Okay, but still, why which? There might be multiple executables sharing the same name. What if there are all under directories in "),s("code",null,"$PATH"),n("? Then we can make sure "),s("strong",null,"which"),n(" one the shell would execute by "),s("code",null,"which"),n(".")],-1),J=s("h3",{id:"shells",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shells","aria-hidden":"true"},"#"),n(" Shells")],-1),Q=s("p",null,"What is a shell? A shell is a command interpreter that reacts to what you type at the command prompt. A shell itself is an executable also! You can fork one shell from another.",-1),ss=s("h4",{id:"some-popular-shells",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#some-popular-shells","aria-hidden":"true"},"#"),n(" Some popular shells")],-1),ns=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Shell"),s("th",null,"Full name"),s("th",null,"Notes")])]),s("tbody",null,[s("tr",null,[s("td",null,[s("strong",null,"sh")]),s("td",null,"Bourne Shell"),s("td",null,"The first shell")]),s("tr",null,[s("td",null,[s("strong",null,"ksh")]),s("td",null,"Korn Shell"),s("td")]),s("tr",null,[s("td",null,[s("strong",null,"csh, tcsh")]),s("td",null,"C Shell"),s("td",null,"The one Steve teach")]),s("tr",null,[s("td",null,[s("strong",null,"bash")]),s("td",null,"Bourne-Again Shell"),s("td",null,"The most common shell on Linux")]),s("tr",null,[s("td",null,[s("strong",null,"zsh")]),s("td",null,"Z Shell"),s("td",null,"The one I use, simply because it comes with macOS")])])],-1),es=s("div",{class:"custom-container danger"},[s("p",{class:"custom-container-title"},"Inconsistency in Bash"),s("p",null,"Different shells have different behaviors. However, watch out fot the seemingly convenience but actually dangerous features. Take bash for example"),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"ls"),n(` a*b
no matches found: a*b
% `),s("span",{class:"token builtin class-name"},"echo"),n(` a*b
a*b
% `),s("span",{class:"token function"},"touch"),n(` ab a12345b
% `),s("span",{class:"token builtin class-name"},"echo"),n(` a*b
ab a12345b
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("div",{class:"highlight-line"},"\xA0"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("div",{class:"highlight-line"},"\xA0")]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])]),s("p",null,[n("However, csh and zsh would always treat "),s("code",null,"a*b"),n(" as a wildcard pattern.")])],-1),as=s("h3",{id:"shell-scripts",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#shell-scripts","aria-hidden":"true"},"#"),n(" Shell scripts")],-1),ls=s("p",null,"A shell scripts is a list of commands. For example",-1),ts=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token function"},"date"),n(`
`),s("span",{class:"token function"},"sleep"),n(),s("span",{class:"token number"},"1"),n(`
`),s("span",{class:"token function"},"date"),n(`
`),s("span",{class:"token function"},"sleep"),n(),s("span",{class:"token number"},"2"),n(`
`),s("span",{class:"token function"},"date"),n(`
`),s("span",{class:"token function"},"sleep"),n(),s("span",{class:"token number"},"3"),n(`
`),s("span",{class:"token function"},"date"),n(`
% `),s("span",{class:"token builtin class-name"},"source"),n(` myscript.sh
Sun Apr `),s("span",{class:"token number"},"11"),n(),s("span",{class:"token number"},"10"),n(":22:58 CST "),s("span",{class:"token number"},"2021"),n(`
Sun Apr `),s("span",{class:"token number"},"11"),n(),s("span",{class:"token number"},"10"),n(":22:59 CST "),s("span",{class:"token number"},"2021"),n(`
Sun Apr `),s("span",{class:"token number"},"11"),n(),s("span",{class:"token number"},"10"),n(":23:01 CST "),s("span",{class:"token number"},"2021"),n(`
Sun Apr `),s("span",{class:"token number"},"11"),n(),s("span",{class:"token number"},"10"),n(":23:04 CST "),s("span",{class:"token number"},"2021"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br")])],-1),cs=s("p",null,[n("But you probably want to run the script in a new shell to prevent from messing up the current one. You can use "),s("code",null,"./myscript.sh"),n(" to execute it, but which shell would be forked? You can specify with "),s("code",null,"#!/bin/zsh"),n(" at the very first line of a script. Typically, lines start with "),s("code",null,"#"),n(" would be comment lines, however only at the first line, we can use "),s("code",null,"#!"),n(" to specify the shell in which the script would run.")],-1),os=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token comment"},"# My default shell is zsh, so let's test if we can specify the shell by bash"),n(`
% `),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token comment"},"#!/bin/bash"),n(`
`),s("span",{class:"token function"},"ps"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"fgrep"),n(),s("span",{class:"token function"},"sh"),n(`
% ./myscript.sh
 `),s("span",{class:"token number"},"6204"),n(" ttys000    "),s("span",{class:"token number"},"0"),n(`:00.45 -zsh
`),s("span",{class:"token number"},"10886"),n(" ttys002    "),s("span",{class:"token number"},"0"),n(`:00.00 /bin/bash ./myscript.sh
`),s("span",{class:"token number"},"10888"),n(" ttys002    "),s("span",{class:"token number"},"0"),n(":00.00 "),s("span",{class:"token function"},"fgrep"),n(),s("span",{class:"token function"},"sh"),n(`
% `),s("span",{class:"token builtin class-name"},"source"),n(` myscript.sh
 `),s("span",{class:"token number"},"6204"),n(" ttys000    "),s("span",{class:"token number"},"0"),n(`:00.45 -zsh
`),s("span",{class:"token number"},"10891"),n(" ttys002    "),s("span",{class:"token number"},"0"),n(":00.01 "),s("span",{class:"token function"},"fgrep"),n(),s("span",{class:"token function"},"sh"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br")])],-1),rs=s("p",null,[n("We saw that if we "),s("code",null,"source"),n(" the script, then the shell will still be the current one.")],-1),is=s("h3",{id:"variables",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#variables","aria-hidden":"true"},"#"),n(" Variables")],-1),us=s("p",null,[n("We will learned the usage of variable in "),s("strong",null,"C-shell")],-1),ps=s("h4",{id:"set",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#set","aria-hidden":"true"},"#"),n(" set")],-1),bs=s("p",null,[n("Use "),s("code",null,"set"),n(" to define a variable with "),s("strong",null,"string"),n(" or another vairable. An "),s("strong",null,"expression"),n(" would not work. Once defined, we can access it with a "),s("code",null,"$"),n(" prefix. For example")],-1),hs=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(" Y "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
Y
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token variable"},"$Y"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
Y: Undefined variable.
% `),s("span",{class:"token builtin class-name"},"set"),n(" Y "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"I am defined"'),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token variable"},"$Y"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
I
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},[n('"'),s("span",{class:"token variable"},"$Y"),n('"')]),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
I am defined
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),n("+1 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
`),s("span",{class:"token number"},"1"),n(`+1
% `),s("span",{class:"token builtin class-name"},"set"),n(" X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),n(" + "),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
set: Variable name must begin with a letter.
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br")])],-1),ms=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"Variables in Shell Are Evaulated by Substitution"),s("p",null,[n("From the above we saw that expression won't work, and if the string contains spaces, it must be wrapped by "),s("code",null,'""'),n(". More importantly, when accessing a variable, the variable is subsititute with its value "),s("strong",null,[n("without the "),s("code",null,'""')]),n(", so we have to add it ourselves to ensure the integrity.")])],-1),ds=s("p",null,[n("We can also define variable with a "),s("code",null,"@"),n(" and a space by numbers or expressions")],-1),ks=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% @ X "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" Y "),s("span",{class:"token operator"},"="),n(` NaN
% @ X `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token variable"},"$Y"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
@: Expression Syntax.
% `),s("span",{class:"token builtin class-name"},"set"),n(" Y "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"123"),n(`
% @ X `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token variable"},"$Y"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
`),s("span",{class:"token number"},"123"),n(`
% @ X `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"100"),n(" + "),s("span",{class:"token number"},"23"),n(" + "),s("span",{class:"token variable"},"$Y"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$X"),n(`
`),s("span",{class:"token number"},"246"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),gs=s("p",null,[n("With the same idea, "),s("code",null,"@"),n(" only works when the value of "),s("code",null,"$Y"),n(" is a number because it subsititue "),s("code",null,"$Y"),n(". Finnaly, we can use "),s("code",null,"unset"),n(" to undefined a defined variable, for example "),s("code",null,"unset $X"),n(".")],-1),fs=s("h3",{id:"arrays",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#arrays","aria-hidden":"true"},"#"),n(" Arrays")],-1),vs=s("p",null,"Arrays are defines by using parentheses and elements are seperated by spaces. The index of an array starts with 1.",-1),_s=s("ul",null,[s("li",null,[n("Use "),s("code",null,"()"),n(" to define an array")]),s("li",null,[n("Use "),s("code",null,"[]"),n(" to access elements "),s("ul",null,[s("li",null,[n("Use "),s("code",null,"-"),n(" to access an range of elements")]),s("li",null,[n("Use "),s("code",null,"[-]"),n(", "),s("code",null,"[*]"),n(", or the name of an array to get all elements")])])]),s("li",null,[n("Use "),s("code",null,"$#"),n(" to get an array's size")]),s("li",null,[n("Use "),s("code",null,"shift"),n(" to kill the first element (inplace) "),s("ul",null,[s("li",null,[n("Also use "),s("code",null,"[2-]"),n(" to kill the first element (copy)")])])])],-1),ys=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token builtin class-name"},"set"),n(" arr "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),n("Apple Banana Cherry"),s("span",{class:"token punctuation"},")"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),n(),s("span",{class:"token punctuation"},"\\"),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),n("-"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token punctuation"},"\\"),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),n("*"),s("span",{class:"token punctuation"},"]"),n(`
Apple Banana Cherry `),s("span",{class:"token operator"},"|"),n(" Apple Banana Cherry "),s("span",{class:"token operator"},"|"),n(` Apple Banana Cherry
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"3"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},"]"),n(`
Cherry Banana Apple
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"2"),n("-"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token punctuation"},"\\"),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token variable"},"$arr"),n(`
Banana Cherry `),s("span",{class:"token operator"},"|"),n(` Apple Banana Cherry
`),s("span",{class:"token comment"},"# the original arr remains intact"),n(`
% `),s("span",{class:"token builtin class-name"},"shift"),n(" arr "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),n(`
Banana Cherry
`),s("span",{class:"token comment"},"# when using shift, $ is not needed"),n(`
`),s("span",{class:"token comment"},"# the original arr has been modified"),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" arr "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),n("Apple "),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),n(`
Apple Banana Cherry
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),n("-"),s("span",{class:"token variable"},[s("span",{class:"token variable"},"`"),s("span",{class:"token function"},"expr"),n(" $#arr - "),s("span",{class:"token number"},"1"),s("span",{class:"token variable"},"`")]),s("span",{class:"token punctuation"},"]"),n(`
Syntax Error.
`),s("span",{class:"token comment"},"# backticks in the brackets do not work"),n(`
% @ size `),s("span",{class:"token operator"},"="),n(),s("span",{class:"token variable"},"$#"),n("arr - "),s("span",{class:"token number"},"1"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$arr"),s("span",{class:"token punctuation"},"["),n("-"),s("span",{class:"token variable"},"$size"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token builtin class-name"},"unset"),n(` size
Apple Banana
`),s("span",{class:"token comment"},"# shift right (remove the last element)"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br"),s("span",{class:"line-number"},"20"),s("br")])],-1),ws=s("h4",{id:"argv",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#argv","aria-hidden":"true"},"#"),n(" argv")],-1),xs=s("p",null,[n("There's a built-in array "),s("code",null,"argv"),n(" in every shell scripts. It's defined by the arguments when we execute the script.")],-1),$s=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token comment"},"#!/bin/tcsh"),n(`
`),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$argv"),s("span",{class:"token punctuation"},"["),n("*"),s("span",{class:"token punctuation"},"]"),n(`
% ./myscript.sh arg1 arg2 arg3
arg1 arg2 arg3
% `),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token comment"},"#!/bin/tcsh"),n(`
`),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$argv"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"1"),s("span",{class:"token punctuation"},"]"),n(`
% ./myscript.sh arg1 arg2 arg3
arg1
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),As=s("p",null,[n("For our convenience, we can omit "),s("code",null,"argv"),n(".")],-1),Bs=s("ul",null,[s("li",null,"$argv[1] $\\equiv$ $1"),s("li",null,"$argv[*] $\\equiv$ $*"),s("li",null,"$#argv $\\equiv$ $#")],-1),Cs=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"Exception"),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token comment"},"#!/bin/tcsh"),n(`
`),s("span",{class:"token builtin class-name"},"echo"),n(" With argv: "),s("span",{class:"token variable"},"$argv"),s("span",{class:"token punctuation"},"["),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token builtin class-name"},"echo"),n(` -------
`),s("span",{class:"token builtin class-name"},"echo"),n(" Without argv: "),s("span",{class:"token variable"},"$0"),n(`
% ./myscript.sh
With argv:
-------
Without argv: ./myscript.sh
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br")])]),s("p",null,[n("We can only access the script's name by "),s("code",null,"$0"),n(" but "),s("code",null,"$argv[0]")])],-1),Ss=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"shift"),s("p",null,[n("Since "),s("code",null,"argv"),n(" is an array, we can also shift it by "),s("code",null,"shift argv"),n(" or "),s("strong",null,"without argv"),n(),s("code",null,"shift"),n(".")]),s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"cat"),n(` myscript.sh
`),s("span",{class:"token comment"},"#!/bin/tcsh"),n(`
`),s("span",{class:"token builtin class-name"},"shift"),n(" argv"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$argv"),n(`
`),s("span",{class:"token builtin class-name"},"shift"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$*"),n(`
% ./myscript.sh arg1 arg2 arg3
arg2 arg3
arg3
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])])],-1),Ts=s("h2",{id:"command-coordination-more-detailed",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#command-coordination-more-detailed","aria-hidden":"true"},"#"),n(" Command Coordination: More Detailed")],-1),Xs=s("h3",{id:"exit-status",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exit-status","aria-hidden":"true"},"#"),n(" Exit status")],-1),zs=s("p",null,[s("code",null,"$?"),n(" holds the exit status of last command (execution)")],-1),Ws=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token builtin class-name"},"echo"),n(" success"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
success
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token function"},"cat"),n(" fail"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
cat: fail: No such `),s("span",{class:"token function"},"file"),n(` or directory
`),s("span",{class:"token number"},"1"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br")])],-1),Ys=s("p",null,"Any non-zero return value means the command failed. Why not use 0 to indicate failure? Because there're plenty reasons for a command to fail and we can use error code to identify them, while we don't care that much why a command successes.",-1),qs=s("p",null,[n("Remeber "),s("code",null,"&&"),n(" and "),s("code",null,"||"),n("? Those operator make decision based on the exit status. Moreover, in our C/C++ program, we typically "),s("code",null,"return 0;"),n(" in the "),s("code",null,"main"),n(" function. It's served the same purpose.")],-1),Ms=s("h2",{id:"exercise",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise","aria-hidden":"true"},"#"),n(" Exercise")],-1),Us=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[n("% "),s("span",{class:"token function"},"ls"),n(` sdgflkd
ls: sdgflkd: No such `),s("span",{class:"token function"},"file"),n(` or directory
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"1"),n(`
% eco `),s("span",{class:"token string"},'"hello world"'),n(`
eco: Command not found.
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token string"},`"hello world
Unmatched '"`),n(`'.
'`),s("span",{class:"token comment"},"# fix hightlighting in this note"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token string"},'"hello world"'),n(),s("span",{class:"token operator"},"||"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
hello world
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token string"},'"hello world"'),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
hello world
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token function"},"cat"),n(` argumentative
`),s("span",{class:"token comment"},"# this program uses the first argument as an exit code"),n(`
`),s("span",{class:"token builtin class-name"},"exit"),n(),s("span",{class:"token variable"},"$1"),n(`
% ./argumentative `),s("span",{class:"token number"},"5"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"5"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% ./argumentative `),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"||"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"5"),n(`
% ./argumentative `),s("span",{class:"token number"},"5"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
% ./argumentative `),s("span",{class:"token number"},"0"),n(),s("span",{class:"token operator"},"||"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
% ./argumentative `),s("span",{class:"token number"},"0"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" x "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"3"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`x
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$x"),n(`
`),s("span",{class:"token number"},"3"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`x
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$y"),n(`
y: Undefined variable.
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`y
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"set"),n(" y "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`y
`),s("span",{class:"token number"},"1"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$y"),n(`
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"unset"),n(` y
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$?"),n(`y
`),s("span",{class:"token number"},"0"),n(`
% `),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token variable"},"$y"),n(`
y: Undefined variable.
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br"),s("span",{class:"line-number"},"20"),s("br"),s("span",{class:"line-number"},"21"),s("br"),s("span",{class:"line-number"},"22"),s("br"),s("span",{class:"line-number"},"23"),s("br"),s("span",{class:"line-number"},"24"),s("br"),s("span",{class:"line-number"},"25"),s("br"),s("span",{class:"line-number"},"26"),s("br"),s("span",{class:"line-number"},"27"),s("br"),s("span",{class:"line-number"},"28"),s("br"),s("span",{class:"line-number"},"29"),s("br"),s("span",{class:"line-number"},"30"),s("br"),s("span",{class:"line-number"},"31"),s("br"),s("span",{class:"line-number"},"32"),s("br"),s("span",{class:"line-number"},"33"),s("br"),s("span",{class:"line-number"},"34"),s("br"),s("span",{class:"line-number"},"35"),s("br"),s("span",{class:"line-number"},"36"),s("br"),s("span",{class:"line-number"},"37"),s("br"),s("span",{class:"line-number"},"38"),s("br"),s("span",{class:"line-number"},"39"),s("br"),s("span",{class:"line-number"},"40"),s("br"),s("span",{class:"line-number"},"41"),s("br"),s("span",{class:"line-number"},"42"),s("br"),s("span",{class:"line-number"},"43"),s("br"),s("span",{class:"line-number"},"44"),s("br"),s("span",{class:"line-number"},"45"),s("br"),s("span",{class:"line-number"},"46"),s("br"),s("span",{class:"line-number"},"47"),s("br"),s("span",{class:"line-number"},"48"),s("br"),s("span",{class:"line-number"},"49"),s("br"),s("span",{class:"line-number"},"50"),s("br"),s("span",{class:"line-number"},"51"),s("br"),s("span",{class:"line-number"},"52"),s("br"),s("span",{class:"line-number"},"53"),s("br"),s("span",{class:"line-number"},"54"),s("br"),s("span",{class:"line-number"},"55"),s("br"),s("span",{class:"line-number"},"56"),s("br"),s("span",{class:"line-number"},"57"),s("br"),s("span",{class:"line-number"},"58"),s("br"),s("span",{class:"line-number"},"59"),s("br"),s("span",{class:"line-number"},"60"),s("br"),s("span",{class:"line-number"},"61"),s("br"),s("span",{class:"line-number"},"62"),s("br"),s("span",{class:"line-number"},"63"),s("br"),s("span",{class:"line-number"},"64"),s("br"),s("span",{class:"line-number"},"65"),s("br"),s("span",{class:"line-number"},"66"),s("br"),s("span",{class:"line-number"},"67"),s("br")])],-1);function Is(Fs,Ns){return a(),e(l,null,[r,i,u,p,b,h,m,d,k,g,f,v,_,y,w,x,$,A,B,C,S,T,X,z,W,Y,q,M,U,I,F,N,E,Z,H,j,O,D,R,V,L,P,G,K,J,Q,ss,ns,es,as,ls,ts,cs,os,rs,is,us,ps,bs,hs,ms,ds,ks,gs,fs,vs,_s,ys,ws,xs,$s,As,Bs,Cs,Ss,Ts,Xs,zs,Ws,Ys,qs,Ms,Us],64)}var Hs=t(o,[["render",Is]]);export{Hs as default};
