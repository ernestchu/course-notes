import{_ as s,c as a,o as n,b as t}from"./app.b33521bb.js";const A=JSON.parse('{"title":"Lecture 9","description":"","frontmatter":{},"headers":[{"level":3,"title":"Pattern match conditionals - the DFA analogy","slug":"pattern-match-conditionals-the-dfa-analogy","link":"#pattern-match-conditionals-the-dfa-analogy","children":[]}],"relativePath":"courses/cse365-unix-system-programming/lecture-9.md"}'),e={name:"courses/cse365-unix-system-programming/lecture-9.md"},o=t(`<h1 id="lecture-9" tabindex="-1">Lecture 9 <a class="header-anchor" href="#lecture-9" aria-hidden="true">#</a></h1><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">cal </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\ 1 d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">cal </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/1/d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">cal </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed -n </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1p</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="pattern-match-conditionals-the-dfa-analogy" tabindex="-1">Pattern match conditionals - the DFA analogy <a class="header-anchor" href="#pattern-match-conditionals-the-dfa-analogy" aria-hidden="true">#</a></h3><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat script</span></span>
<span class="line"><span style="color:#676E95;">#!/usr/bin/sed -f</span></span>
<span class="line"><span style="color:#A6ACCD;">/start/,/stop/ s/</span><span style="color:#676E95;">#.*//</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">cat f1</span></span>
<span class="line"><span style="color:#A6ACCD;">star </span><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">start </span><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">sto</span></span>
<span class="line"><span style="color:#A6ACCD;">sto#</span></span>
<span class="line"><span style="color:#A6ACCD;">stop#</span></span>
<span class="line"><span style="color:#A6ACCD;">star#</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./script </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> f1</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>star #</code></td><td>Print the line</td></tr><tr><td><code>start #</code></td><td>Go to state 1 and remove <code>#</code>, then print the line</td></tr><tr><td><code>sto</code></td><td>Still in state 1, print the line</td></tr><tr><td><code>sto#</code></td><td>Remove <code>#</code> and print the line</td></tr><tr><td><code>stop#</code></td><td>Remove <code>#</code>, print the line, then go to state 0</td></tr><tr><td><code>star#</code></td><td>Print the line</td></tr></tbody></table><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat f2</span></span>
<span class="line"><span style="color:#A6ACCD;">ffstart </span><span style="color:#676E95;">#ff</span></span>
<span class="line"><span style="color:#A6ACCD;">stop </span><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#A6ACCD;">start#</span></span>
<span class="line"><span style="color:#A6ACCD;">ggg#</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./script </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> f2</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>ffstart #ff</code></td><td>Go to state 1 and remove <code>#ff</code>, then print the line</td></tr><tr><td><code>stop #</code></td><td>Remove <code>#</code>, print the line, then go to state 0</td></tr><tr><td><code>start#</code></td><td>Go to state 1 and remove <code>#</code>, the print the line</td></tr><tr><td><code>ggg#</code></td><td>Remove <code>#</code> and print the line</td></tr></tbody></table><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat f2</span></span>
<span class="line"><span style="color:#A6ACCD;">ffstart </span><span style="color:#676E95;">#stop</span></span>
<span class="line"><span style="color:#A6ACCD;">stop </span><span style="color:#676E95;"># start</span></span>
<span class="line"><span style="color:#A6ACCD;">ggg#</span></span>
<span class="line"><span style="color:#A6ACCD;">start#</span></span>
<span class="line"><span style="color:#A6ACCD;">stop </span><span style="color:#676E95;"># start</span></span>
<span class="line"><span style="color:#A6ACCD;">ggg#</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./script </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> f2</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>Input line</th><th>Action</th></tr></thead><tbody><tr><td><code>ffstart #stop</code></td><td>Go to state 1 and remove <code>#stop</code>, then print the line</td></tr><tr><td><code>stop # start</code></td><td>Remove <code># start</code>, print the line, then go to state 0</td></tr><tr><td><code>ggg#</code></td><td>Print the line</td></tr><tr><td><code>start#</code></td><td>Go to state 1, remove <code>#</code> and print the line</td></tr><tr><td><code>stop # start</code></td><td>Remove <code># start</code>, print the line and go to state 0</td></tr><tr><td><code>ggg#</code></td><td>Print the line</td></tr></tbody></table><p>The following only works in Linux sed but not in macOS sed</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">seq 3 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s/2/two/;t;d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">seq 3 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/2/b;d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">seq 3 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sed </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/2/!d</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div>`,14),l=[o];function p(c,r,d,i,y,D){return n(),a("div",null,l)}const C=s(e,[["render",p]]);export{A as __pageData,C as default};
