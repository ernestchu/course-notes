import{_ as i,c as t,a as e,b as a,d as o,o as r}from"./app.b33521bb.js";const s="/course-notes/assets/figure-ycwang-1.7b41ee82.png",n="/course-notes/assets/figure-2.572efcc6.png",N=JSON.parse('{"title":"Network Programming","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Process commmunication","slug":"process-commmunication","link":"#process-commmunication","children":[]},{"level":3,"title":"Layering architecture","slug":"layering-architecture","link":"#layering-architecture","children":[]},{"level":3,"title":"P2P vs. client-server","slug":"p2p-vs-client-server","link":"#p2p-vs-client-server","children":[]}]}],"relativePath":"courses/cse491-network-application-programming/chapter-1.md"}'),c={name:"courses/cse491-network-application-programming/chapter-1.md"},d=a('<h1 id="network-programming" tabindex="-1">Network Programming <a class="header-anchor" href="#network-programming" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><h3 id="process-commmunication" tabindex="-1">Process commmunication <a class="header-anchor" href="#process-commmunication" aria-hidden="true">#</a></h3><h4 id="a-process-is-a-program-in-execution" tabindex="-1">A process is a program in execution <a class="header-anchor" href="#a-process-is-a-program-in-execution" aria-hidden="true">#</a></h4><p>In your computer, processes may talk with each other by <strong>inter-process communication (IPC)</strong>. IPC methods include</p><ul><li>File locking</li><li>Pipes</li><li>FIFO</li><li>Message queues</li><li>Semaphores</li><li>Shared memory</li></ul><p>Processes may be also executed on different systems. From the viewpoint of each process, this is till IPC.</p><p><img src="'+s+'" alt="figure-1"></p><blockquote><p>Image credit to Professor Wang&#39;s slides</p></blockquote><h3 id="layering-architecture" tabindex="-1">Layering architecture <a class="header-anchor" href="#layering-architecture" aria-hidden="true">#</a></h3><p>In the 7-layer model, each layer is responsible for different tasks.</p><table><thead><tr><th>Layer</th><th>Task</th></tr></thead><tbody><tr><td>Application</td><td>To allow access to network resources</td></tr><tr><td>Presentation</td><td>To translate, encrypt, and compress data</td></tr><tr><td>Session</td><td>To establish, manage, and terminate sessions</td></tr><tr><td>Transport</td><td>To provide reliable process-to-process message delivery and error recovery</td></tr><tr><td>Network</td><td>To move packets from source to destination; to provide internetworking</td></tr><tr><td>Data link</td><td>To organize bits into frames; to provide hop-to-hop delivery</td></tr><tr><td>Physical</td><td>To transmit bits over a medium; to provide mechanical and electrical specifications</td></tr></tbody></table><h4 id="data-encapsulation" tabindex="-1">Data encapsulation <a class="header-anchor" href="#data-encapsulation" aria-hidden="true">#</a></h4>',13),l=o("The data portion of a packet at level "),h={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.076ex",height:"1.756ex",role:"img",focusable:"false",viewBox:"0 -694 2243.4 776"},m=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(743.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1743.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),p=[m],Q=o(" carries the whole packet from level "),_={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.179ex",height:"1.595ex",role:"img",focusable:"false",viewBox:"0 -694 521 705"},u=e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D458",d:"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z",style:{"stroke-width":"3"}})])])],-1),w=[u],f=o(" (while the header portion is for level "),v={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},x={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.076ex",height:"1.756ex",role:"img",focusable:"false",viewBox:"0 -694 2243.4 776"},y=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(743.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1743.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1),k=[y],b=o(" itself)"),P=a('<p><img src="'+n+'" alt="figure-2"></p><blockquote><p>Image credit to Professor Wang&#39;s slides</p></blockquote><h3 id="p2p-vs-client-server" tabindex="-1">P2P vs. client-server <a class="header-anchor" href="#p2p-vs-client-server" aria-hidden="true">#</a></h3><p>Network communications can be classified into two types:</p><h4 id="peer-to-peer-p2p" tabindex="-1">Peer-to-peer (P2P) <a class="header-anchor" href="#peer-to-peer-p2p" aria-hidden="true">#</a></h4><p>Data may be distributed over all computer. A common example is torrenting in which data is segmented into small parts and distributed all over the user end systems. However, we still need a server to coordinate between endpoints, otherwise, we cannot find at which IP addresses the data exist.</p><h4 id="client-server-architecture" tabindex="-1">Client-server architecture <a class="header-anchor" href="#client-server-architecture" aria-hidden="true">#</a></h4><p>Data may be concentrated on few sites, i.e., servers. And other computers, i.e., clients, may obtain their desired dat aby querying these sites.</p>',8);function H(V,S,I,C,A,L){return r(),t("div",null,[d,e("p",null,[l,e("mjx-container",h,[(r(),t("svg",T,p))]),Q,e("mjx-container",_,[(r(),t("svg",g,w))]),f,e("mjx-container",v,[(r(),t("svg",x,k))]),b]),P])}const M=i(c,[["render",H]]);export{N as __pageData,M as default};
