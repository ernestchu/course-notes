import{_ as o,c as n,a as s,b as e,d as a,o as l}from"./app.b33521bb.js";const p="/course-notes/assets/source.97295306.png",H=JSON.parse('{"title":"Lecture 3","description":"","frontmatter":{},"headers":[{"level":2,"title":"Miscellaneous Commands","slug":"miscellaneous-commands","link":"#miscellaneous-commands","children":[{"level":3,"title":"sort","slug":"sort","link":"#sort","children":[]},{"level":3,"title":"uniq","slug":"uniq","link":"#uniq","children":[]},{"level":3,"title":"tr","slug":"tr","link":"#tr","children":[]}]},{"level":2,"title":"More Miscellaneous Commands","slug":"more-miscellaneous-commands","link":"#more-miscellaneous-commands","children":[{"level":3,"title":"split","slug":"split","link":"#split","children":[]},{"level":3,"title":"touch","slug":"touch","link":"#touch","children":[]},{"level":3,"title":"which","slug":"which","link":"#which","children":[]}]},{"level":2,"title":"Shell Basic","slug":"shell-basic","link":"#shell-basic","children":[{"level":3,"title":"Why which","slug":"why-which","link":"#why-which","children":[]},{"level":3,"title":"Shells","slug":"shells","link":"#shells","children":[]},{"level":3,"title":"Shell scripts","slug":"shell-scripts","link":"#shell-scripts","children":[]},{"level":3,"title":"Variables","slug":"variables","link":"#variables","children":[]},{"level":3,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]}]},{"level":2,"title":"Command Coordination: More Detailed","slug":"command-coordination-more-detailed","link":"#command-coordination-more-detailed","children":[{"level":3,"title":"Exit status","slug":"exit-status","link":"#exit-status","children":[]}]},{"level":2,"title":"Exercise","slug":"exercise","link":"#exercise","children":[]}],"relativePath":"courses/cse365-unix-system-programming/lecture-3.md"}'),t={name:"courses/cse365-unix-system-programming/lecture-3.md"},c=e(`<h1 id="lecture-3" tabindex="-1">Lecture 3 <a class="header-anchor" href="#lecture-3" aria-hidden="true">#</a></h1><h2 id="miscellaneous-commands" tabindex="-1">Miscellaneous Commands <a class="header-anchor" href="#miscellaneous-commands" aria-hidden="true">#</a></h2><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>sort (-gkrsR)</code></td><td>Sort the lines of a file</td></tr><tr><td><code>uniq (-c)</code></td><td>Delete repeated lines (leave unique lines)</td></tr><tr><td><code>tr (-dc)</code></td><td>Replace (translate) or delete characteers</td></tr><tr><td><code>expr</code></td><td>Calculate an expression from arguments</td></tr><tr><td><code>seq</code></td><td>Create a sequence of numbers, 1 per line</td></tr></tbody></table><h3 id="sort" tabindex="-1">sort <a class="header-anchor" href="#sort" aria-hidden="true">#</a></h3><p>Some useful flags:</p><ul><li><code>-r</code>: <strong>sort in reverse order.</strong></li><li><code>-g</code>: <strong>performs a numeric sort.</strong> if no <code>-g</code>, then it is <strong>alphabetic</strong> sort, meaning that <strong>10</strong> goes before <strong>2</strong></li><li><code>-k</code>: <strong>allows you to sort on different fields.</strong> e.g. <code>sort -k3</code> sorts on the 3<sup>rd</sup> field.</li><li><code>-s</code>: <strong>keeps lines that in the same sorting order maintain the original order.</strong> e.g. <code>sort -k3 | sort -sk5</code> sorts based on the 5<sup>th</sup> field, with the 3<sup>rd</sup> field as a tie-breaker.</li><li><code>-R</code>: <strong>sort in random order</strong></li></ul><h3 id="uniq" tabindex="-1">uniq <a class="header-anchor" href="#uniq" aria-hidden="true">#</a></h3><p><code>uniq</code> erases duplicate lines. However, it does not search the whole file but the preceding line.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat File</span></span>
<span class="line"><span style="color:#A6ACCD;">AA</span></span>
<span class="line"><span style="color:#A6ACCD;">BB</span></span>
<span class="line"><span style="color:#A6ACCD;">BB</span></span>
<span class="line"><span style="color:#A6ACCD;">AA</span></span>
<span class="line"><span style="color:#A6ACCD;">BB</span></span>
<span class="line"><span style="color:#A6ACCD;">% cat File </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> uniq</span></span>
<span class="line"><span style="color:#A6ACCD;">AA</span></span>
<span class="line"><span style="color:#A6ACCD;">BB</span></span>
<span class="line"><span style="color:#A6ACCD;">AA</span></span>
<span class="line"><span style="color:#A6ACCD;">BB</span></span>
<span class="line"></span></code></pre></div><p>Therefore <code>uniq</code> is often used with <code>sort</code> to first make all duplicates adjacent.</p><h3 id="tr" tabindex="-1">tr <a class="header-anchor" href="#tr" aria-hidden="true">#</a></h3><h4 id="encoding" tabindex="-1">Encoding <a class="header-anchor" href="#encoding" aria-hidden="true">#</a></h4><p>Perform <strong>ROT13</strong> encoding on file.txt</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-zA-Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">n-za-mN-ZA-M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> file.txt </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> file.enc</span></span>
<span class="line"></span></code></pre></div><p>Since there&#39;re 26 letters in English, we can use the same command to decode it.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-zA-Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">n-za-mN-ZA-M</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> file.enc </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> file.dec</span></span>
<span class="line"></span></code></pre></div><h4 id="delete" tabindex="-1">Delete <a class="header-anchor" href="#delete" aria-hidden="true">#</a></h4><p>If you want to delete characters, use <code>tr -d</code> with one arguments. The flag <code>-c</code> (complement) may be used with the <code>-d</code> flag to delte everythig except for the set.</p><h4 id="corpus" tabindex="-1">Corpus <a class="header-anchor" href="#corpus" aria-hidden="true">#</a></h4><p>Get corpus from a file contains lots of words.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">cat ManyWords </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr -cd </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-zA-Z\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sort </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> uniq </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> corpus</span></span>
<span class="line"></span></code></pre></div><p>if we want it to be case-insensitive</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">cat ManyWords </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr -cd </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-zA-Z\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A-Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sort </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> uniq </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> corpus</span></span>
<span class="line"><span style="color:#676E95;"># Or in a more consice form</span></span>
<span class="line"><span style="color:#A6ACCD;">cat ManyWords </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A-Z </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-z\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> tr -cd </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a-z\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sort </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> uniq </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> corpus</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="more-miscellaneous-commands" tabindex="-1">More Miscellaneous Commands <a class="header-anchor" href="#more-miscellaneous-commands" aria-hidden="true">#</a></h2><h3 id="split" tabindex="-1">split <a class="header-anchor" href="#split" aria-hidden="true">#</a></h3><p><code>split</code> splits a file into a set of smaller files, each with the indicated numver of bytes or lines.</p><h3 id="touch" tabindex="-1">touch <a class="header-anchor" href="#touch" aria-hidden="true">#</a></h3><p><code>touch</code> literally <strong>touches</strong> the file. Many including me thought it was for creating files, but it actually touches the file and consequently update a file&#39;s <strong>timestamp</strong>. If the file doesn&#39;t exist, create it.</p><h3 id="which" tabindex="-1">which <a class="header-anchor" href="#which" aria-hidden="true">#</a></h3><p><code>which</code> identifies where an executable is located. In fact, just like your <code>a,out</code> generated by <code>gcc</code>, all the commands you&#39;ve learned so far are essentially a executable, so there must be some places to store all these executables. That brings us to the next part of this note.</p><h2 id="shell-basic" tabindex="-1">Shell Basic <a class="header-anchor" href="#shell-basic" aria-hidden="true">#</a></h2><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">gcc main.c</span></span>
<span class="line"><span style="color:#A6ACCD;">./a.out</span></span>
<span class="line"></span></code></pre></div><p>You&#39;ve probably done this before. The above command calls GNU C Compiler to compile a c source code into an executable, then executes it. More specifically, the shell <strong>forks</strong> a new process by executing gcc. When it finished, the shell then forks a new process running your program.</p><p><img src="`+p+`" alt="source"></p><p>On the other hand, if you use <strong>source</strong>, the action is placed on the current process, that is, the shell. Common files that we would use <strong>source</strong> include</p><ul><li><strong>shell configuration files:</strong> e.g., <code>.zshrc</code>, <code>.bashrc</code>, because we want to see the config takes place in the current shell.</li><li><strong>shell scripts:</strong> a shell script is a list of commands that you can run just by one execution on the script. If you execute it without <code>source</code>, you fork a new shell and execute the commands, and vice versa.</li></ul><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> .zshrc</span></span>
<span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> myscript.sh</span></span>
<span class="line"></span></code></pre></div><h3 id="why-which" tabindex="-1">Why which <a class="header-anchor" href="#why-which" aria-hidden="true">#</a></h3><p>We said that all those commands are just like your <code>a.out</code>, executables, but why we use <code>./a.out</code> but <code>ls</code> without dot-slash?</p><p>Because the dot-slash specifies that the file <code>a.out</code> is under the current directory. However <code>ls</code> and other commands are not in there. Where to find them? Try this</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">PATH</span></span>
<span class="line"><span style="color:#A6ACCD;">/usr/local/opt/tcl-tk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/Library/Apple/usr/bin</span></span>
<span class="line"></span></code></pre></div><p><code>$PATH</code> is a predefined variable that stores the directories containing the command executables. The directories are seperated by colons, let&#39;s look into <code>/bin</code></p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% ls /bin</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">		dash	expr		ln		</span><span style="color:#82AAFF;">pwd</span><span style="color:#A6ACCD;">		sync</span></span>
<span class="line"><span style="color:#A6ACCD;">bash	date	hostname	ls		rm		tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">cat		dd		</span><span style="color:#82AAFF;">kill</span><span style="color:#A6ACCD;">		mkdir	rmdir	</span><span style="color:#82AAFF;">test</span></span>
<span class="line"><span style="color:#A6ACCD;">chmod	df		ksh		    mv		sh		unlink</span></span>
<span class="line"><span style="color:#A6ACCD;">cp		</span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;">	launchctl	pax		sleep	wait4path</span></span>
<span class="line"><span style="color:#A6ACCD;">csh		ed		link		ps		stty	zsh</span></span>
<span class="line"></span></code></pre></div><p>Something familiar? Okay, but still, why which? There might be multiple executables sharing the same name. What if there are all under directories in <code>$PATH</code>? Then we can make sure <strong>which</strong> one the shell would execute by <code>which</code>.</p><h3 id="shells" tabindex="-1">Shells <a class="header-anchor" href="#shells" aria-hidden="true">#</a></h3><p>What is a shell? A shell is a command interpreter that reacts to what you type at the command prompt. A shell itself is an executable also! You can fork one shell from another.</p><h4 id="some-popular-shells" tabindex="-1">Some popular shells <a class="header-anchor" href="#some-popular-shells" aria-hidden="true">#</a></h4><table><thead><tr><th>Shell</th><th>Full name</th><th>Notes</th></tr></thead><tbody><tr><td><strong>sh</strong></td><td>Bourne Shell</td><td>The first shell</td></tr><tr><td><strong>ksh</strong></td><td>Korn Shell</td><td></td></tr><tr><td><strong>csh, tcsh</strong></td><td>C Shell</td><td>The one Steve teach</td></tr><tr><td><strong>bash</strong></td><td>Bourne-Again Shell</td><td>The most common shell on Linux</td></tr><tr><td><strong>zsh</strong></td><td>Z Shell</td><td>The one I use, simply because it comes with macOS</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">Inconsistency in Bash</p><p>Different shells have different behaviors. However, watch out fot the seemingly convenience but actually dangerous features. Take bash for example</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% ls a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#A6ACCD;">no matches found: a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#A6ACCD;">% touch ab a12345b</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">b</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">ab a12345b</span></span>
<span class="line"></span></code></pre></div><p>However, csh and zsh would always treat <code>a*b</code> as a wildcard pattern.</p></div><h3 id="shell-scripts" tabindex="-1">Shell scripts <a class="header-anchor" href="#shell-scripts" aria-hidden="true">#</a></h3><p>A shell scripts is a list of commands. For example</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">date</span></span>
<span class="line"><span style="color:#A6ACCD;">sleep 1</span></span>
<span class="line"><span style="color:#A6ACCD;">date</span></span>
<span class="line"><span style="color:#A6ACCD;">sleep 2</span></span>
<span class="line"><span style="color:#A6ACCD;">date</span></span>
<span class="line"><span style="color:#A6ACCD;">sleep 3</span></span>
<span class="line"><span style="color:#A6ACCD;">date</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">Sun Apr 11 10:22:58 CST 2021</span></span>
<span class="line"><span style="color:#A6ACCD;">Sun Apr 11 10:22:59 CST 2021</span></span>
<span class="line"><span style="color:#A6ACCD;">Sun Apr 11 10:23:01 CST 2021</span></span>
<span class="line"><span style="color:#A6ACCD;">Sun Apr 11 10:23:04 CST 2021</span></span>
<span class="line"></span></code></pre></div><p>But you probably want to run the script in a new shell to prevent from messing up the current one. You can use <code>./myscript.sh</code> to execute it, but which shell would be forked? You can specify with <code>#!/bin/zsh</code> at the very first line of a script. Typically, lines start with <code>#</code> would be comment lines, however only at the first line, we can use <code>#!</code> to specify the shell in which the script would run.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># My default shell is zsh, so let&#39;s test if we can specify the shell by bash</span></span>
<span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#676E95;">#!/bin/bash</span></span>
<span class="line"><span style="color:#A6ACCD;">ps </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> fgrep sh</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;"> 6204 ttys000    0:00.45 -zsh</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">10886 ttys002    0:00.00 /bin/bash ./myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">10888 ttys002    0:00.00 fgrep sh</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;"> 6204 ttys000    0:00.45 -zsh</span></span>
<span class="line"><span style="color:#A6ACCD;">10891 ttys002    0:00.01 fgrep sh</span></span>
<span class="line"></span></code></pre></div><p>We saw that if we <code>source</code> the script, then the shell will still be the current one.</p><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h3><p>We will learned the usage of variable in <strong>C-shell</strong></p><h4 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-hidden="true">#</a></h4><p>Use <code>set</code> to define a variable with <strong>string</strong> or another vairable. An <strong>expression</strong> would not work. Once defined, we can access it with a <code>$</code> prefix. For example</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = 1 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">Y</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">Y: Undefined variable.</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> Y = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I am defined</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">I</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = </span><span style="color:#89DDFF;">&quot;$</span><span style="color:#A6ACCD;">Y</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">I am defined</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = 1+1 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">1+1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> X = 1 + 1 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">set: Variable name must begin with a letter.</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Variables in Shell Are Evaulated by Substitution</p><p>From the above we saw that expression won&#39;t work, and if the string contains spaces, it must be wrapped by <code>&quot;&quot;</code>. More importantly, when accessing a variable, the variable is subsititute with its value <strong>without the <code>&quot;&quot;</code></strong>, so we have to add it ourselves to ensure the integrity.</p></div><p>We can also define variable with a <code>@</code> and a space by numbers or expressions</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% @ X = 1 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> Y = NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">% @ X = </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">@: Expression Syntax.</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> Y = 123</span></span>
<span class="line"><span style="color:#A6ACCD;">% @ X = </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">123</span></span>
<span class="line"><span style="color:#A6ACCD;">% @ X = 100 + 23 + </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">Y </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">X</span></span>
<span class="line"><span style="color:#A6ACCD;">246</span></span>
<span class="line"></span></code></pre></div><p>With the same idea, <code>@</code> only works when the value of <code>$Y</code> is a number because it subsititue <code>$Y</code>. Finnaly, we can use <code>unset</code> to undefined a defined variable, for example <code>unset $X</code>.</p><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-hidden="true">#</a></h3><p>Arrays are defines by using parentheses and elements are seperated by spaces. The index of an array starts with 1.</p><ul><li>Use <code>()</code> to define an array</li><li>Use <code>[]</code> to access elements <ul><li>Use <code>-</code> to access an range of elements</li><li>Use <code>[-]</code>, <code>[*]</code>, or the name of an array to get all elements</li></ul></li><li>Use <code>$#</code> to get an array&#39;s size</li><li>Use <code>shift</code> to kill the first element (inplace) <ul><li>Also use <code>[2-]</code> to kill the first element (copy)</li></ul></li></ul><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> arr = </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Apple Banana Cherry</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr \\| </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> \\| </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">Apple Banana Cherry </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Apple Banana Cherry </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Apple Banana Cherry</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Cherry Banana Apple</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">2-</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> \\| </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span></span>
<span class="line"><span style="color:#A6ACCD;">Banana Cherry </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Apple Banana Cherry</span></span>
<span class="line"><span style="color:#676E95;"># the original arr remains intact</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">shift</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span></span>
<span class="line"><span style="color:#A6ACCD;">Banana Cherry</span></span>
<span class="line"><span style="color:#676E95;"># when using shift, $ is not needed</span></span>
<span class="line"><span style="color:#676E95;"># the original arr has been modified</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> arr = </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Apple </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span></span>
<span class="line"><span style="color:#A6ACCD;">Apple Banana Cherry</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">expr </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">#</span><span style="color:#C3E88D;">arr - 1</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">Syntax Error.</span></span>
<span class="line"><span style="color:#676E95;"># backticks in the brackets do not work</span></span>
<span class="line"><span style="color:#A6ACCD;">% @ size = </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">#arr - 1 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unset</span><span style="color:#A6ACCD;"> size</span></span>
<span class="line"><span style="color:#A6ACCD;">Apple Banana</span></span>
<span class="line"><span style="color:#676E95;"># shift right (remove the last element)</span></span>
<span class="line"></span></code></pre></div><h4 id="argv" tabindex="-1">argv <a class="header-anchor" href="#argv" aria-hidden="true">#</a></h4><p>There&#39;s a built-in array <code>argv</code> in every shell scripts. It&#39;s defined by the arguments when we execute the script.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[*]</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./myscript.sh arg1 arg2 arg3</span></span>
<span class="line"><span style="color:#A6ACCD;">arg1 arg2 arg3</span></span>
<span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./myscript.sh arg1 arg2 arg3</span></span>
<span class="line"><span style="color:#A6ACCD;">arg1</span></span>
<span class="line"></span></code></pre></div><p>For our convenience, we can omit <code>argv</code>.</p>`,72),r=a("$argv[1] "),A={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},i={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0.081ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.76ex",height:"0.968ex",role:"img",focusable:"false",viewBox:"0 -464 778 428"},y=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2261",d:"M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z",style:{"stroke-width":"3"}})])])],-1),C=[y],D=a(" $1"),h=a("$argv[*] "),d={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0.081ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.76ex",height:"0.968ex",role:"img",focusable:"false",viewBox:"0 -464 778 428"},u=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2261",d:"M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z",style:{"stroke-width":"3"}})])])],-1),m=[u],g=a(" $*"),b=a("$#argv "),f={class:"MathJax",jax:"SVG",style:{direction:"ltr"}},v={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0.081ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.76ex",height:"0.968ex",role:"img",focusable:"false",viewBox:"0 -464 778 428"},w=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mo"},[s("path",{"data-c":"2261",d:"M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z",style:{"stroke-width":"3"}})])])],-1),x=[w],$=a(" $#"),_=e(`<div class="warning custom-block"><p class="custom-block-title">Exception</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> With argv: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> -------</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> Without argv: </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">With argv:</span></span>
<span class="line"><span style="color:#A6ACCD;">-------</span></span>
<span class="line"><span style="color:#A6ACCD;">Without argv: ./myscript.sh</span></span>
<span class="line"></span></code></pre></div><p>We can only access the script&#39;s name by <code>$0</code> but <code>$argv[0]</code></p></div><div class="warning custom-block"><p class="custom-block-title">shift</p><p>Since <code>argv</code> is an array, we can also shift it by <code>shift argv</code> or <strong>without argv</strong> <code>shift</code>.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% cat myscript.sh</span></span>
<span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#82AAFF;">shift</span><span style="color:#A6ACCD;"> argv</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">argv</span></span>
<span class="line"><span style="color:#82AAFF;">shift</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">*</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./myscript.sh arg1 arg2 arg3</span></span>
<span class="line"><span style="color:#A6ACCD;">arg2 arg3</span></span>
<span class="line"><span style="color:#A6ACCD;">arg3</span></span>
<span class="line"></span></code></pre></div></div><h2 id="command-coordination-more-detailed" tabindex="-1">Command Coordination: More Detailed <a class="header-anchor" href="#command-coordination-more-detailed" aria-hidden="true">#</a></h2><h3 id="exit-status" tabindex="-1">Exit status <a class="header-anchor" href="#exit-status" aria-hidden="true">#</a></h3><p><code>$?</code> holds the exit status of last command (execution)</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> success</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">success</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% cat fail</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">cat: fail: No such file or directory</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"></span></code></pre></div><p>Any non-zero return value means the command failed. Why not use 0 to indicate failure? Because there&#39;re plenty reasons for a command to fail and we can use error code to identify them, while we don&#39;t care that much why a command successes.</p><p>Remeber <code>&amp;&amp;</code> and <code>||</code>? Those operator make decision based on the exit status. Moreover, in our C/C++ program, we typically <code>return 0;</code> in the <code>main</code> function. It&#39;s served the same purpose.</p><h2 id="exercise" tabindex="-1">Exercise <a class="header-anchor" href="#exercise" aria-hidden="true">#</a></h2><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% ls sdgflkd</span></span>
<span class="line"><span style="color:#A6ACCD;">ls: sdgflkd: No such file or directory</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% eco </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">eco: Command not found.</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span></span>
<span class="line"><span style="color:#C3E88D;">Unmatched &#39;</span><span style="color:#89DDFF;">&quot;&#39;</span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;"># fix hightlighting in this note</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% cat argumentative</span></span>
<span class="line"><span style="color:#676E95;"># this program uses the first argument as an exit code</span></span>
<span class="line"><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./argumentative 5</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./argumentative 5 </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./argumentative 5 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./argumentative 0 </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">% ./argumentative 0 </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> x = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?x</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">x</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?x</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#A6ACCD;">y: Undefined variable.</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?y</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> y = 0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?y</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">unset</span><span style="color:#A6ACCD;"> y</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">?y</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#A6ACCD;">y: Undefined variable.</span></span>
<span class="line"></span></code></pre></div>`,10);function k(q,E,T,S,B,M){return l(),n("div",null,[c,s("ul",null,[s("li",null,[r,s("mjx-container",A,[(l(),n("svg",i,C))]),D]),s("li",null,[h,s("mjx-container",d,[(l(),n("svg",F,m))]),g]),s("li",null,[b,s("mjx-container",f,[(l(),n("svg",v,x))]),$])]),_])}const X=o(t,[["render",k]]);export{H as __pageData,X as default};
