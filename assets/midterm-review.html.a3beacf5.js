import{e}from"./app.bdc3a143.js";import{_ as t}from"./plugin-vue_export-helper.5a098b48.js";const d={},r=e('<h1 id="midtern-review" tabindex="-1"><a class="header-anchor" href="#midtern-review" aria-hidden="true">#</a> Midtern Review</h1><h2 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h2><h3 id="viewing-files" tabindex="-1"><a class="header-anchor" href="#viewing-files" aria-hidden="true">#</a> Viewing Files</h3><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>cat [-n] [filename]</code></td><td>Display a file on screen</td></tr><tr><td><code>less [filename]</code></td><td>Display a file as a book (you can scroll back &amp; forth)</td></tr><tr><td><code>head [-n count] [filename]</code></td><td>Display the first n lines</td></tr><tr><td><code>tail [-n count] [filename]</code></td><td>Display the last n lines</td></tr><tr><td>`paste [filename</td><td>-]`</td></tr></tbody></table><h3 id="managing-files-and-directories" tabindex="-1"><a class="header-anchor" href="#managing-files-and-directories" aria-hidden="true">#</a> Managing Files and Directories</h3><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>ls [-lrt]</code></td><td>list files and directories in a directory</td></tr><tr><td><code>cd [directory]</code></td><td>change current directory</td></tr><tr><td><code>pwd</code></td><td>print working directory</td></tr><tr><td><code>cp [src] [dst]</code></td><td>copy files</td></tr><tr><td><code>mv [src] [dst]</code></td><td>move files</td></tr><tr><td><code>rm [-rf]</code></td><td>remove files</td></tr><tr><td><code>mkdir</code></td><td>create directory</td></tr><tr><td><code>rmdir</code></td><td>delete directory (must be empty)</td></tr><tr><td><code>tar [-xcvf]</code></td><td>create (or extract) on archive file</td></tr><tr><td><code>ln -s</code></td><td>create a symbolic link</td></tr><tr><td><code>chmod [ugo+-rwx]</code></td><td>change file permissions</td></tr></tbody></table><h3 id="file-analysis" tabindex="-1"><a class="header-anchor" href="#file-analysis" aria-hidden="true">#</a> File Analysis</h3><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>diff [-qy] [--color]</code></td><td>Compare files</td></tr><tr><td><code>wc [-cwl] [filename]</code></td><td>Word count. [#lines][#words][#characters][filename]</td></tr><tr><td><code>sort (-gk)</code></td><td>Sort the lines of a file</td></tr><tr><td><code>uniq (-c)</code></td><td>Delete repeated lines (leave unique lines)</td></tr><tr><td><code>fgrep [-inovw] [--color]</code></td><td>Fixed string search</td></tr><tr><td><code>grep [-inovw] [--color]</code></td><td>Regular expression search</td></tr><tr><td><code>egrep [-inovw] [--color]</code></td><td>Extended regular expression search</td></tr></tbody></table><h3 id="other-basic-commands" tabindex="-1"><a class="header-anchor" href="#other-basic-commands" aria-hidden="true">#</a> Other Basic Commands</h3><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>echo [string]</code></td><td>print the string, use <code>-n</code> to prevent newline</td></tr><tr><td><code>shift</code></td><td>remove $1 from $*, and then renumber</td></tr><tr><td><code>exit</code></td><td>exit a script, returning the specified value</td></tr><tr><td><code>find . -name</code></td><td>search for a file recursively</td></tr><tr><td><code>history</code></td><td>list the history of commands you typed</td></tr><tr><td><code>which</code></td><td>identify the location of an executable</td></tr><tr><td><code>man</code></td><td>display the manual page for a command</td></tr><tr><td>`![number</td><td>prefix]`</td></tr></tbody></table><h3 id="more-advanced-commands" tabindex="-1"><a class="header-anchor" href="#more-advanced-commands" aria-hidden="true">#</a> More Advanced Commands</h3><table><thead><tr><th><code>xargs</code></th><th>Add the pipe input to the argument list</th></tr></thead><tbody><tr><td><code>expr</code></td><td>Calculate an expression from arguments</td></tr><tr><td><code>tr (-dc)</code></td><td>Replace (translate) or delete characteers</td></tr><tr><td><code>cut [-fcd] [--complement] [filename]</code></td><td><code>cut</code> charaters(<code>-c</code>) or fields(<code>-f</code>) from each input line</td></tr><tr><td><code>sed [-nf]</code></td><td>Stream editor (Actions will be on the test: <code>p=syz</code>)</td></tr></tbody></table><h2 id="c-shell" tabindex="-1"><a class="header-anchor" href="#c-shell" aria-hidden="true">#</a> C-shell</h2><h3 id="commands-1" tabindex="-1"><a class="header-anchor" href="#commands-1" aria-hidden="true">#</a> Commands</h3><ul><li>if () cmd</li><li>if () then <ul><li>else if () then</li><li>else</li><li>endif</li></ul></li><li>if (-z/e file)</li><li>switch ()</li><li>while ()</li><li>foreach ($*)</li><li>$#argv</li><li>$argv[$#argv]</li><li>set X = $&lt;</li><li>set X = word</li><li>set X = $3:q</li><li>set T</li><li>unset T</li><li>@ X = $2 + $Y</li></ul><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h3><ul><li>User created variables <ul><li><code>$myvar</code>, <code>$file1</code>, etc. <ul><li>This also include array definition and usage based on subscript range</li></ul></li></ul></li><li>Keyword shell variables <ul><li><code>$PATH</code>, <code>$prompt</code>, <code>$HOME</code>, etc. <ul><li>These have special meaning to the shell</li></ul></li></ul></li><li>Positional parameters <ul><li><code>$1</code>, <code>$2</code>, etc. <ul><li>You will need to use shift if there are more than 9</li></ul></li></ul></li><li>Special parameters <ul><li><code>$*</code> - All arguments as a single string</li><li><code>$#</code> - The number of command-line arguments</li><li><code>$#X</code> - The number of elements in array X</li><li><code>$&lt;</code> - A line typed from keyboard (or redirected from a file)</li><li><code>$?</code> - The exit status of the last command</li><li><code>$?X</code>-Test to see if variable X exists</li></ul></li></ul><h3 id="symbols" tabindex="-1"><a class="header-anchor" href="#symbols" aria-hidden="true">#</a> Symbols</h3><table><thead><tr><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td><code>.</code> , <code>..</code> , <code>~</code></td><td>Current directory\xA0 /\xA0 Parent directory\xA0 /\xA0 Home directory</td></tr><tr><td><code>/</code></td><td>Subdirectory separator in a path name</td></tr><tr><td><code>? </code>, <code>*</code></td><td>Match one character\xA0 /\xA0 Match any number of characters</td></tr><tr><td><code>[]</code>, <code>[^]</code></td><td>Match one character from a set\xA0 /\xA0 not from a set</td></tr><tr><td><code>cmd&lt;file</code></td><td>Take standard input from a file</td></tr><tr><td><code>cmd&gt;file</code></td><td>Redirect standard output to a file</td></tr><tr><td><code>cmd&gt;&gt;file</code></td><td>Redirect standard output to the end of a file</td></tr><tr><td><code>cmd&gt;&amp; file</code></td><td>Send standard error messages also to file</td></tr><tr><td>`cmd</td><td>cmd`</td></tr><tr><td><code>cmd ; cmd</code></td><td>Run the 1st command and then run the 2nd</td></tr><tr><td><code>cmd &amp;&amp; cmd</code></td><td>Run the 2nd command only if the 1st fails</td></tr><tr><td>`cmd</td><td></td></tr><tr><td><code>(cmd; cmd; ...)</code></td><td>Run command(s) in a subshell</td></tr><tr><td><code>cmd `cmd`</code></td><td>Command substitution as an argument to another command</td></tr><tr><td><code>&quot;</code>, <code>&#39;</code>, <code>\\</code></td><td>Quoting characters to control symbol substitution</td></tr><tr><td><code>$?</code>, <code>$?V</code></td><td>exit status of last command, existence check for variable V</td></tr><tr><td><code>$#</code>, <code>$#V</code></td><td>Number of: arguments to a script, elements in an array V</td></tr><tr><td><code>$*</code>, <code>$num</code>, <code>$V</code></td><td>Access the value(s) of: all arguments, an argument, a variable</td></tr></tbody></table><h2 id="regular-expression" tabindex="-1"><a class="header-anchor" href="#regular-expression" aria-hidden="true">#</a> Regular Expression</h2><h3 id="wild-card-v-s-regex" tabindex="-1"><a class="header-anchor" href="#wild-card-v-s-regex" aria-hidden="true">#</a> Wild card v.s. regex</h3><ul><li>A wild card pattern: <ul><li><code>ls [a-e]*</code><ul><li>This lists all files beginning with one of the first 5 letters</li></ul></li></ul></li><li>A regular expression pattern: <ul><li><code>grep &#39;[a-e]*&#39; file</code><ul><li>This matches all lines with 0 or more elements of the first 5 letters <ul><li>For example, <code>abcdebaceda</code></li><li>But the empty string is also a match (because 0 is allowed)</li></ul></li></ul></li></ul></li><li>An extended regular expression pattern: <ul><li><code>egrep &#39;[a-e]*&#39; file</code><ul><li>This matches the same lines as the above grep did</li><li>But the matches would be different for egrep <code>&#39;[a-e]+&#39;</code> file</li></ul></li></ul></li><li>A simple list: <ul><li><code>tr -d &#39;[a-e]*&#39; &lt; file</code><ul><li>This deleted every instance of any of the first 5 letters. But it also deletes the <code>[</code>, <code>]</code>, and <code>*</code> symbols</li><li>You see that? You don\u2019t use <code>[</code> and <code>]</code> to enclose the lists for tr.</li></ul></li></ul></li></ul><table><thead><tr><th>In regex</th><th>In csh wilcard</th><th>Meaning</th></tr></thead><tbody><tr><td><code>\\</code></td><td><code>\\</code></td><td>Same</td></tr><tr><td><code>[]</code></td><td><code>[]</code></td><td>Same?</td></tr><tr><td><code>.</code></td><td><code>?</code></td><td>Same but different symbols</td></tr><tr><td><code>*</code></td><td><code>*</code></td><td>Different</td></tr></tbody></table><h3 id="regex-symbols" tabindex="-1"><a class="header-anchor" href="#regex-symbols" aria-hidden="true">#</a> Regex symbols</h3><table><thead><tr><th>Symbol</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>^</code></td><td>caret, as the first symbol of a regex, requires the expression to match the front of a line.</td><td>line begins with &#39;A&#39;: <code>^A</code></td></tr><tr><td><code>$</code></td><td>dollar sign, as the last symbol of a regex, requires the expression to match the end of a line.</td><td>line ends with &#39;Z&#39;: <code>Z$</code></td></tr><tr><td><code>\\</code></td><td>backslash, turns off special meaning for the next character.</td><td>match to a literal &#39;$&#39;: <code>\\$</code></td></tr><tr><td><code>[]</code></td><td>brackets, matches to any one of the enclosed characters.</td><td>match to any vowel: <code>[aeiou]</code></td></tr><tr><td><code>.</code></td><td>period, matches to any 1 character.</td><td>a 1-character line: <code>^.$</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Special Symbols Inside Brackets</p><table><thead><tr><th>Symbol</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>-</code></td><td>hyphen, inside <code>[]</code>, matches to a range.</td><td>a digit: <code>[0-9]</code></td></tr><tr><td><code>^</code></td><td>caret, as the first symbol inside <code>[]</code>, matches any one character except those enclosed in the <code>[]</code></td><td>not a letter: <code>[^a-zA-Z]</code></td></tr></tbody></table><div class="custom-container warning"><p class="custom-container-title">The Position of The Caret</p><p>If the caret was not placed as the first symbol inside <code>[]</code>, for example, <code>[ab^cd]</code>, then it just represents a literal `^&#39;.</p></div></div><h3 id="normal-regex-only" tabindex="-1"><a class="header-anchor" href="#normal-regex-only" aria-hidden="true">#</a> Normal regex only</h3><table><thead><tr><th>Expression</th><th>Description</th></tr></thead><tbody><tr><td><code>\\{x\\}</code></td><td>Matches <code>x</code> repetitions of the preceding regex.</td></tr><tr><td><code>\\{x,y\\}</code></td><td>Matches <code>x</code> to <code>y</code> repetitions of the preceding regex.</td></tr><tr><td><code>\\{,x\\}</code></td><td>Matches if the number of repetitions of the preceding regex $\\leq$ <code>x</code>.</td></tr><tr><td><code>\\{x,\\}</code></td><td>Matches if the number of repetitions of the preceding regex $\\geq$ <code>x</code>.</td></tr><tr><td><code>\\&gt;</code></td><td>The preceding regex must end at the end of a <strong>word</strong>.</td></tr><tr><td><code>\\&lt;</code></td><td>The preceding regex must end at the start of a <strong>word</strong>.</td></tr><tr><td><code>\\(...\\)</code></td><td>Define a <strong>group</strong> for a sub-portion of the regex. A group can be used before <code>*</code> or <code>\\{...\\}</code>, which match the repetition of the entire group.</td></tr><tr><td><code>\\1</code>, <code>\\2</code>, etc.</td><td>Backreference. Identify a rematch to the earlier pattern. We&#39;ll see the detail below.</td></tr></tbody></table><h3 id="extended-regex-only" tabindex="-1"><a class="header-anchor" href="#extended-regex-only" aria-hidden="true">#</a> Extended regex only</h3><table><thead><tr><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td><code>?</code></td><td>Makes the preceding expression optional, i.e. <code>\\{0,1\\}</code>.</td></tr><tr><td><code>+</code></td><td>Requires the preceding expression to occur <strong>at least once</strong>, i.e. <code>\\{1,\\}</code>.</td></tr><tr><td>`</td><td>`</td></tr><tr><td><code>()</code></td><td>Can be used to change the associatibity of `</td></tr></tbody></table><h3 id="regex-vs-eregex" tabindex="-1"><a class="header-anchor" href="#regex-vs-eregex" aria-hidden="true">#</a> Regex vs. eregex</h3><table><thead><tr><th>Expression</th><th>In <code>grep</code></th><th>In <code>egrep</code></th></tr></thead><tbody><tr><td>`abc</td><td>def`</td><td>the string `abc</td></tr><tr><td>`(a$)</td><td>(b(c</td><td>d)e)`</td></tr><tr><td><code>ab+c</code></td><td>the string <code>ab+c</code></td><td><code>abc</code> or <code>abbc</code>, or <code>abbbc</code>, etc.</td></tr><tr><td><code>\\([ab]\\)\\1</code></td><td><code>aa</code> or <code>bb</code></td><td><code>(a)1</code> or <code>(b)1</code></td></tr><tr><td><code>a\\{2</code></td><td>an error, closing } not found</td><td><code>a{2</code></td></tr><tr><td><code>\\&lt;a</code></td><td>words begin with <code>a</code></td><td><code>&lt;a</code> (in standard egrep)</td></tr></tbody></table>',32);function o(c,a){return r}var s=t(d,[["render",o]]);export{s as default};
