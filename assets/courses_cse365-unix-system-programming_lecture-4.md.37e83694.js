import{_ as s,c as n,o as a,b as e}from"./app.eea76462.js";const C=JSON.parse(`{"title":"Lecture 4","description":"","frontmatter":{},"headers":[{"level":2,"title":"C-Shell Control Flow","slug":"c-shell-control-flow","link":"#c-shell-control-flow","children":[{"level":3,"title":"if statement","slug":"if-statement","link":"#if-statement","children":[]},{"level":3,"title":"while loop","slug":"while-loop","link":"#while-loop","children":[]},{"level":3,"title":"foreach","slug":"foreach","link":"#foreach","children":[]}]},{"level":2,"title":"A Delete Script","slug":"a-delete-script","link":"#a-delete-script","children":[{"level":3,"title":"List of functionalities","slug":"list-of-functionalities","link":"#list-of-functionalities","children":[]},{"level":3,"title":"Source code","slug":"source-code","link":"#source-code","children":[]}]},{"level":2,"title":"Quote","slug":"quote","link":"#quote","children":[{"level":3,"title":"Strong quote","slug":"strong-quote","link":"#strong-quote","children":[]},{"level":3,"title":"Weak quote","slug":"weak-quote","link":"#weak-quote","children":[]},{"level":3,"title":"Exercise","slug":"exercise","link":"#exercise","children":[]}]},{"level":2,"title":"Backslash'es'","slug":"backslash-es","link":"#backslash-es","children":[{"level":3,"title":"Can we use the escape sequences inside quotes?","slug":"can-we-use-the-escape-sequences-inside-quotes","link":"#can-we-use-the-escape-sequences-inside-quotes","children":[]},{"level":3,"title":"From 1 to n backslashes","slug":"from-1-to-n-backslashes","link":"#from-1-to-n-backslashes","children":[]}]},{"level":2,"title":"Debugging","slug":"debugging","link":"#debugging","children":[]}],"relativePath":"courses/cse365-unix-system-programming/lecture-4.md"}`),l={name:"courses/cse365-unix-system-programming/lecture-4.md"},o=e(`<h1 id="lecture-4" tabindex="-1">Lecture 4 <a class="header-anchor" href="#lecture-4" aria-hidden="true">#</a></h1><h2 id="c-shell-control-flow" tabindex="-1">C-Shell Control Flow <a class="header-anchor" href="#c-shell-control-flow" aria-hidden="true">#</a></h2><ul><li>if <ul><li>then, else, endif</li></ul></li><li>switch <ul><li>case, default, breaksw, end</li></ul></li><li>while <ul><li>continue, break, end</li></ul></li><li>foreach <ul><li>continue, break, end</li></ul></li></ul><h3 id="if-statement" tabindex="-1">if statement <a class="header-anchor" href="#if-statement" aria-hidden="true">#</a></h3><h4 id="simple-format" tabindex="-1">Simple format <a class="header-anchor" href="#simple-format" aria-hidden="true">#</a></h4><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">statement</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="full-format" tabindex="-1">Full format <a class="header-anchor" href="#full-format" aria-hidden="true">#</a></h4><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">statement</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">statement</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">statement</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">endif</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Spaces</p><p>C-shell is super picky about spaces between words and symbles. The spaces in the example above is necessary. If you get an error message while developing, first try fixing it by <strong>adding spaces</strong></p></div><h4 id="csh-condition-test-operators" tabindex="-1">Csh condition test operators <a class="header-anchor" href="#csh-condition-test-operators" aria-hidden="true">#</a></h4><table><tr><th>Symbol</th><th>Name</th><th>Description</th></tr><tr><td>!</td><td>Negate</td><td rowspan="4">Works just as they do in C conditionals</td></tr><tr><td>!=</td><td>Not equal</td></tr><tr><td>==</td><td>Equal</td></tr><tr><td>&gt;, &lt;, &lt;=, &gt;=</td><td>Relational</td></tr><tr><td>=~</td><td>Match to wildcard pattern</td><td>[variable] =~ [pattern]</td></tr><tr><td>!~</td><td>Not match to wildcard pattern</td><td>[variable] !~ [pattern]</td></tr></table><h4 id="csh-conditional-file-tests" tabindex="-1">Csh conditional file tests <a class="header-anchor" href="#csh-conditional-file-tests" aria-hidden="true">#</a></h4><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -d filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is a directory</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -e filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename exists</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -f filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is a plain file</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -o filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if you own the file</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -r filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is readable</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -w filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is writable</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -x filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is executalbe</span></span>
<span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -z filename </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># true if filename is empty</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Examing Flags From Arguments</p><p>Suppose you want to write a script that accepts a <code>-r</code> option as an script arguments. The following won&#39;t work.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1 == -r </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The -r flag was given</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>If <code>$1</code> is indeed <code>-r</code>, after the substitution, it would become</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -r == -r </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The -r flag was given</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">if: Missing file name.</span></span>
<span class="line"></span></code></pre></div><p>which examine if the file <code>==</code> is readable and a trailing <code>-r</code> causing the error.</p></div><div class="tip custom-block"><p class="custom-block-title">Adding a dummy prefix</p><p>The best you can do is to add a dummy prefix, for example</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1 == d-r </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The -r flag was given</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div></div><h3 id="while-loop" tabindex="-1">while loop <a class="header-anchor" href="#while-loop" aria-hidden="true">#</a></h3><h4 id="emulating-for-loop-with-while" tabindex="-1">Emulating for loop with <code>while</code> <a class="header-anchor" href="#emulating-for-loop-with-while" aria-hidden="true">#</a></h4><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">@ i = 0</span></span>
<span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">expr </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i</span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;">\\&lt;</span><span style="color:#C3E88D;"> 3</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> -n </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i</span></span>
<span class="line"><span style="color:#A6ACCD;">    @ i++</span></span>
<span class="line"><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>Output</summary><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">0 1 2</span></span>
<span class="line"></span></code></pre></div></details><h3 id="foreach" tabindex="-1">foreach <a class="header-anchor" href="#foreach" aria-hidden="true">#</a></h3><p>Dive into an example</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">foreach person </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Bob Susan Nico</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> Hello </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">person</span></span>
<span class="line"><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>Output</summary><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">Hello Bob</span></span>
<span class="line"><span style="color:#A6ACCD;">Hello Susan</span></span>
<span class="line"><span style="color:#A6ACCD;">Hello Nico</span></span>
<span class="line"></span></code></pre></div></details><div class="tip custom-block"><p class="custom-block-title">Still A Better For Loop</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">foreach i </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">seq 10 10 100</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i + 1 = </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">expr </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">i</span><span style="color:#C3E88D;"> + 1</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span></code></pre></div><details class="details custom-block"><summary>Output</summary><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">10 + 1 = 11</span></span>
<span class="line"><span style="color:#A6ACCD;">20 + 1 = 21</span></span>
<span class="line"><span style="color:#A6ACCD;">30 + 1 = 31</span></span>
<span class="line"><span style="color:#A6ACCD;">40 + 1 = 41</span></span>
<span class="line"><span style="color:#A6ACCD;">50 + 1 = 51</span></span>
<span class="line"><span style="color:#A6ACCD;">60 + 1 = 61</span></span>
<span class="line"><span style="color:#A6ACCD;">70 + 1 = 71</span></span>
<span class="line"><span style="color:#A6ACCD;">80 + 1 = 81</span></span>
<span class="line"><span style="color:#A6ACCD;">90 + 1 = 91</span></span>
<span class="line"><span style="color:#A6ACCD;">100 + 1 = 101</span></span>
<span class="line"></span></code></pre></div></details></div><h2 id="a-delete-script" tabindex="-1">A Delete Script <a class="header-anchor" href="#a-delete-script" aria-hidden="true">#</a></h2><p>Let&#39;s write a scrtpt!</p><h3 id="list-of-functionalities" tabindex="-1">List of functionalities <a class="header-anchor" href="#list-of-functionalities" aria-hidden="true">#</a></h3><p>For each command-line argument</p><ol><li>Ask about whether it should be deleted.</li><li>Read the user&#39;s response from stdin.</li><li>Perform the action indicated by the user&#39;s response.</li></ol><h3 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-hidden="true">#</a></h3><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;">#!/bin/tcsh</span></span>
<span class="line"><span style="color:#A6ACCD;">foreach name </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># loop through arguments</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> -f </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># test if it is a file</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> -n </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delete the file </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span><span style="color:#C3E88D;"> (y/n/q)? </span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> -n </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delete the entire directory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;$</span><span style="color:#A6ACCD;">name</span><span style="color:#C3E88D;"> (y/n/q)? </span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    endif</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> ans = $</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># This symbol indicates to take input from keyboard</span></span>
<span class="line"><span style="color:#A6ACCD;">    switch </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">ans </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> n:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">continue</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> q:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># no args means $? will be 0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">case</span><span style="color:#A6ACCD;"> y:</span></span>
<span class="line"><span style="color:#A6ACCD;">            rm -rf </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#A6ACCD;">    endsw</span></span>
<span class="line"><span style="color:#A6ACCD;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="quote" tabindex="-1">Quote <a class="header-anchor" href="#quote" aria-hidden="true">#</a></h2><p>So far, we&#39;ve seen many special symbols that have their own special meanings, such as <code>|</code> is for pipelining, <code>$</code> is for variables, etc.. However, what if we want those symbols literally, i.e. the plaintext, no special meaning. Then we <strong>quote</strong> them.</p><p>There&#39;re three quoting symbols</p><table><thead><tr><th>Symbol</th><th>Description</th></tr></thead><tbody><tr><td><code>\\</code></td><td>Single charater quote</td></tr><tr><td><code>&#39;</code></td><td>Strong quotes</td></tr><tr><td><code>&quot;</code></td><td>Weak quotes</td></tr></tbody></table><h3 id="strong-quote" tabindex="-1">Strong quote <a class="header-anchor" href="#strong-quote" aria-hidden="true">#</a></h3><p>Stong quote <code>&#39;</code>. What do you mean by strong? If it&#39;s strong, it can turn other special symbols into plaintexts. If a special symbol is <strong>stronger</strong> then it, such as <code>![prefix]</code>, then it cannot suppress the symbol</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hi! Hi!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">Hi</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> Hi</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hi!Hi!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">Hi</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">: Event not found.</span></span>
<span class="line"></span></code></pre></div><p>On the line 4, the <code>!</code> thought <code>Hi!</code> was a prefix of a previous command, but obviously, we don&#39;t have commnads with prefix of <code>Hi!</code>.</p><h3 id="weak-quote" tabindex="-1">Weak quote <a class="header-anchor" href="#weak-quote" aria-hidden="true">#</a></h3><p>Weak quote <code>&quot;</code>. Allow dollar sign <code>$</code> and backtick execution <code>\`[command]\`</code> to expand inside two quotes. i.e. it&#39;s not strong enough to supress these two special symbols.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Is the executable under </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">PATH</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Is the executable under /usr/local/opt/tcl-tk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/TeX/texbin:/Library/Apple/usr/bin</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My current directory is </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">pwd</span><span style="color:#89DDFF;">\`&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">My current directory is /Users/ernestchu</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Strength</p><p><strong><code>\\</code> &gt; <code>&#39;</code> &gt; <code>&quot;</code></strong></p><ul><li><code>\\</code> supresses <code>!</code> (history expansion) and all other commands, even EOL can be quoted. That&#39;s why we can add <code>\\</code> at the end of lines to have multi-line commands.</li><li><code>&#39;</code> as <em>weaker</em> quotes, cannot supresses <code>!</code></li><li><code>&quot;</code> as even weaker quotes, cannot surpress <code>!</code>, <code>$</code> and backticks <code>\`\`</code></li></ul></div><div class="danger custom-block"><p class="custom-block-title">Quotes Within Quotes</p><p>The strength is based on what commands do they surpress. But it doesn&#39;t mean <code>\\</code> surpresses <code>&#39;</code> or <code>&#39;</code> surpresses <code>&quot;</code>.</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">% echo </span><span style="color:#89DDFF;">&#39;&quot;</span><span style="color:#C3E88D;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\</span><span style="color:#89DDFF;">&#39;&quot;</span><span style="color:#A6ACCD;">\\&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\</span></span>
<span class="line"><span style="color:#C3E88D;">% echo \\&#39;</span><span style="color:#A6ACCD;">\\\\\\&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">&#39;</span><span style="color:#A6ACCD;">\\&quot;</span></span>
<span class="line highlighted"><span style="color:#C3E88D;">% echo &#39;&#39;&#39;</span></span>
<span class="line highlighted"><span style="color:#C3E88D;">Unmatched &#39;&#39;&#39;.</span></span>
<span class="line highlighted"><span style="color:#C3E88D;">% echo </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">Unmatched </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div><p>Interestingly, the only quote that can quote itself is <code>\\</code>. Neither <code>&#39;</code> nor <code>&quot;</code> can quote themselves. Why? We&#39;ll see below</p></div><p>The shell parsed commands from left to right</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line highlighted"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">I am in the stong quote interpretation rule.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2191                                            \u2191</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502                                  turn off \u2500\u2518</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500 turn on strong quote interpretation</span></span>
<span class="line"></span></code></pre></div><p>So actually, quotes doesn&#39;t generate string, they just change the way a shell interpretates commands.</p><p>Once it entered the <strong>zone</strong> by hitting <code>&#39;</code>, the shell turn on plaintext interpretation until it hits next <code>&#39;</code>. (Yet except <code>!</code>)</p><h3 id="exercise" tabindex="-1">Exercise <a class="header-anchor" href="#exercise" aria-hidden="true">#</a></h3><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">% echo &#39;This doesn\\&#39;t work&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">Unmatched &#39;&#39;&#39;.</span></span>
<span class="line"><span style="color:#A6ACCD;">% echo &#39;Turn off the &quot;strong quote interpretation&quot; first, then it&#39;\\&#39;&#39;ll work!&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">Turn off the &quot;strong quote interpretation&quot; first, then it&#39;ll work!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="backslash-es" tabindex="-1">Backslash&#39;es&#39; <a class="header-anchor" href="#backslash-es" aria-hidden="true">#</a></h2><p>How does <code>echo</code> interpret the <code>\\</code> symbol?</p><h3 id="can-we-use-the-escape-sequences-inside-quotes" tabindex="-1">Can we use the escape sequences inside quotes? <a class="header-anchor" href="#can-we-use-the-escape-sequences-inside-quotes" aria-hidden="true">#</a></h3><p>It&#39;s really depends on the shell</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># In tcsh on Steve&#39;s computer</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a\\tb\\\\</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">a   b\\</span></span>
<span class="line"><span style="color:#676E95;"># In tcsh on my MacBook</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a\\tb\\\\</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">a\\tb\\\\</span></span>
<span class="line"></span></code></pre></div><p>We&#39;d better follow Steve&#39;s computer...</p><h3 id="from-1-to-n-backslashes" tabindex="-1">From 1 to n backslashes <a class="header-anchor" href="#from-1-to-n-backslashes" aria-hidden="true">#</a></h3><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\ </span><span style="color:#676E95;"># 1</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;"># this is not an output, it&#39;s an indicator telling you </span></span>
<span class="line"><span style="color:#676E95;"># that the command hasn&#39;t finished, because EOL was suprressed</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\ </span><span style="color:#676E95;"># 2</span></span>
<span class="line"><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\ </span><span style="color:#676E95;"># 3</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># same as line 2</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\\\ </span><span style="color:#676E95;"># 4</span></span>
<span class="line"><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#676E95;"># csh substitute \\\\\\\\ with \\\\. However, when \\\\ is sent into echo</span></span>
<span class="line"><span style="color:#676E95;"># as an argument, echo has it&#39;s own substitution again, thus /</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\\\\\ </span><span style="color:#676E95;"># 5</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># same as line 2, so we know odd number of \\ would all get this</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\\\\\\\\\\\ </span><span style="color:#676E95;"># 8</span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\ </span><span style="color:#676E95;"># echo receives \\\\\\\\, hence substitute with \\\\ internally</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ </span><span style="color:#676E95;"># 16</span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\\\\\ </span><span style="color:#676E95;"># echo receives \\\\\\\\\\\\\\\\.</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> xargs </span><span style="color:#82AAFF;">echo</span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\ </span><span style="color:#676E95;"># been through two internal substitutions of echo</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">\\\\\\\\\\\\\\\\</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> xargs </span><span style="color:#82AAFF;">echo</span></span>
<span class="line"><span style="color:#A6ACCD;">\\\\ </span><span style="color:#676E95;"># quoted, hence \\\\\\\\\\\\\\\\ -&gt; \\\\\\\\ -&gt; \\\\</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">xargs Do Not Substitute</p><p>We&#39;ve said <code>echo</code> does it own expansion, what about <code>xargs</code>? Does the <code>\\\\</code> in <code>xargs echo \\\\</code> become <code>\\</code> before send into <code>echo</code>? The anwser is negative. Let&#39;s look at an example on wildcard expansion</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">% ls </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">A B</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">A B </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> xargs </span><span style="color:#82AAFF;">echo</span></span>
<span class="line"><span style="color:#A6ACCD;">A B </span><span style="color:#676E95;"># A B were sent to xargs echo, so it makes sense</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> xargs </span><span style="color:#82AAFF;">echo</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># ? was sent to xargs echo, and xargs don&#39;t do the expansion</span></span>
<span class="line"><span style="color:#A6ACCD;">% </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">echo </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&#39;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">A B </span></span>
<span class="line"><span style="color:#676E95;"># while backticks simply substitute echo &#39;?&#39; with ? (without quotes).</span></span>
<span class="line"><span style="color:#676E95;"># so it becomes echo ?</span></span>
<span class="line"></span></code></pre></div></div><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-hidden="true">#</a></h2><p>Not sure if you quote correctly? Especially when you writing a script. Well, Unix provides a great tool to help you out!</p><ul><li><code>set echo</code> print every command executed <strong>after</strong> the subsitution</li><li><code>set verbose</code> print every command executed <strong>before</strong> the substution</li></ul><p>And you can <code>unset</code> them if you want to turn off the behavior.</p>`,63),p=[o];function t(c,r,i,y,D,A){return a(),n("div",null,p)}const h=s(l,[["render",t]]);export{C as __pageData,h as default};
