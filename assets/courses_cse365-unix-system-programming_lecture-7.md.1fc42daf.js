import{_ as e,c as t,o as s,b as a}from"./app.eea76462.js";const _=JSON.parse('{"title":"Lecture 7","description":"","frontmatter":{},"headers":[{"level":2,"title":"More sed","slug":"more-sed","link":"#more-sed","children":[]}],"relativePath":"courses/cse365-unix-system-programming/lecture-7.md"}'),o={name:"courses/cse365-unix-system-programming/lecture-7.md"},n=a(`<h1 id="lecture-7" tabindex="-1">Lecture 7 <a class="header-anchor" href="#lecture-7" aria-hidden="true">#</a></h1><h2 id="more-sed" tabindex="-1">More <code>sed</code> <a class="header-anchor" href="#more-sed" aria-hidden="true">#</a></h2><p>After the <code>c</code> command, the program don&#39;t go to the next state. Instead, it clears the pattern space and resets the program to the first state. i.e., the presence of <code>-n</code> doesn&#39;t matter because the state handling it has been dropped.</p><p>The rest of line after <code>i</code>, <code>a</code>, <code>c</code> is the argument for the commands. So the semicolon and everything else would be the part of the argument for <code>iac</code>, i.e., the <code>;</code> would not be a command separtor.</p><p>In a sed file, use them like</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">-aeverything is part of the argument until newline</span></span>
<span class="line"><span style="color:#A6ACCD;">-creset</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In co</p>`,7),r=[n];function c(d,i,l,p,h,m){return s(),t("div",null,r)}const f=e(o,[["render",c]]);export{_ as __pageData,f as default};
